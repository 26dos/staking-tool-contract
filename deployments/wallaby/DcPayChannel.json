{
  "address": "0xc0C05B9eD79e5CAf2A5432B08B689bf499ECa8EF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIL_PER_10T",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_TIME_20_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCK_TIME_40_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllStakeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct DcPayChannel.StakeInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStakeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeType",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stakeId",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbc6450dbcc55ae29f4348e0a5d2a221329ee65e1bf1bc4fcb53cc83cb7387f29",
  "receipt": {
    "to": null,
    "from": "0xd68cC5807d9573A17B731Dd7a056fe9DA3cfbCa9",
    "contractAddress": "0xc0C05B9eD79e5CAf2A5432B08B689bf499ECa8EF",
    "transactionIndex": 55,
    "gasUsed": "68388389",
    "logsBloom": "0x
    "blockHash": "0x931c3551485d4ba298933c4c995ad2e09692c1d7c20f919e67d73e735296d78e",
    "transactionHash": "0xbc6450dbcc55ae29f4348e0a5d2a221329ee65e1bf1bc4fcb53cc83cb7387f29",
    "logs": [],
    "blockNumber": 4303979,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e5dfc358605204b8b45e9d73ab5c0d66",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIL_PER_10T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIME_20_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIME_40_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct DcPayChannel.StakeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DcPayChannel.sol\":\"DcPayChannel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/DcPayChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\ncontract DcPayChannel is Ownable2StepUpgradeable{\\n    // \\u8d28\\u62bc\\u7684\\u4fe1\\u606f\\u7ed3\\u6784\\n    struct Stake {\\n        uint256 amount;      // \\u8d28\\u62bcFIL\\u6570\\u91cf\\n        uint256 startTime;   // \\u8d28\\u62bc\\u5f00\\u59cb\\u65f6\\u95f4\\n        uint256 lockTime;    // \\u9501\\u5b9a\\u65f6\\u95f4\\uff0c20\\u5929\\u621640\\u5929\\n        bool active;         // \\u8d28\\u62bc\\u662f\\u5426\\u6709\\u6548\\n    }\\n\\n    // \\u7528\\u6237\\u7684\\u8d28\\u62bc\\u8bb0\\u5f55\\u7ed3\\u6784\\uff0c\\u7528\\u4e8e\\u8fd4\\u56de\\u5168\\u90e8\\u8d28\\u62bc\\u4fe1\\u606f\\n    struct StakeInfo {\\n        uint256 stakeId;     // \\u8d28\\u62bcID\\n        uint256 amount;      // \\u8d28\\u62bcFIL\\u6570\\u91cf\\n        uint256 startTime;   // \\u8d28\\u62bc\\u5f00\\u59cb\\u65f6\\u95f4\\n        uint256 lockTime;    // \\u9501\\u5b9a\\u65f6\\u95f4\\n        bool active;         // \\u8d28\\u62bc\\u662f\\u5426\\u6709\\u6548\\n    }\\n\\n    // \\u6bcf\\u4e2a\\u5730\\u5740\\u53ef\\u4ee5\\u6709\\u591a\\u6761\\u8d28\\u62bc\\u8bb0\\u5f55\\uff0c\\u4f7f\\u7528\\u6570\\u7ec4\\n    mapping(address => Stake[]) public stakes; // \\u6bcf\\u4e2a\\u5730\\u5740\\u5bf9\\u5e94\\u4e00\\u4e2a\\u8d28\\u62bc\\u6570\\u7ec4\\n\\n    // \\u8d28\\u62bc\\u6bd4\\u4f8b\\u548c\\u6700\\u5927\\u7533\\u8bf7\\u91cf\\n    uint256 public constant FIL_PER_10T = 1 ether; // 10T\\u7684DC\\u9700\\u89811FIL\\n    uint256 public constant MAX_DC = 2 * 1024;     // \\u6700\\u59272P\\n\\n    // \\u9501\\u5b9a\\u65f6\\u95f4\\u5e38\\u91cf\\n    uint256 public constant LOCK_TIME_20_DAYS = 20 days;\\n    uint256 public constant LOCK_TIME_40_DAYS = 40 days;\\n\\n    event Staked(address indexed user, uint256 amount, uint256 lockTime, uint256 stakeId);\\n    event Unstaked(address indexed user, uint256 amount, uint256 stakeId);\\n\\n    // \\u8d28\\u62bc\\u529f\\u80fd\\n    function stake(uint256 dcAmount, uint256 stakeType) external payable {\\n        require(stakeType == 0 || stakeType == 1, \\\"Invalid stake type\\\");\\n        require(dcAmount <= MAX_DC, \\\"Exceeds max DC\\\");\\n\\n        // \\u6839\\u636e\\u8d28\\u62bc\\u7c7b\\u578b\\u786e\\u5b9a\\u9501\\u5b9a\\u65f6\\u95f4\\n        uint256 lockTime = (stakeType == 0) ? LOCK_TIME_20_DAYS : LOCK_TIME_40_DAYS;\\n\\n        // \\u8ba1\\u7b97\\u6240\\u9700FIL\\u8d28\\u62bc\\u6570\\u91cf\\n        uint256 requiredFil = (dcAmount / 10) * FIL_PER_10T;\\n        require(msg.value >= requiredFil, \\\"Insufficient FIL for staking\\\");\\n\\n        // \\u5b58\\u50a8\\u8d28\\u62bc\\u4fe1\\u606f\\u5230\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u8bb0\\u5f55\\u6570\\u7ec4\\u4e2d\\n        stakes[msg.sender].push(Stake({\\n            amount: msg.value,\\n            startTime: block.timestamp,\\n            lockTime: lockTime,\\n            active: true\\n        }));\\n\\n        // \\u83b7\\u53d6\\u8d28\\u62bc\\u7684ID\\n        uint256 stakeId = stakes[msg.sender].length - 1;\\n\\n        emit Staked(msg.sender, msg.value, lockTime, stakeId);\\n    }\\n\\n    // \\u89e3\\u9501\\u529f\\u80fd\\uff0c\\u901a\\u8fc7\\u8d28\\u62bc\\u8bb0\\u5f55ID\\u89e3\\u9501\\n    function unlock(uint256 stakeId) external {\\n        require(stakeId < stakes[msg.sender].length, \\\"Invalid stakeId\\\");\\n\\n        Stake storage userStake = stakes[msg.sender][stakeId];\\n        require(userStake.active, \\\"Stake is already unlocked\\\");\\n        require(block.timestamp >= userStake.startTime + userStake.lockTime, \\\"Stake is still locked\\\");\\n\\n        uint256 amountToReturn = userStake.amount;\\n        userStake.active = false; // \\u5c06\\u8be5\\u8d28\\u62bc\\u6807\\u8bb0\\u4e3a\\u65e0\\u6548\\n\\n        // \\u8fd4\\u8fd8\\u8d28\\u62bc\\u7684FIL\\n        (bool success, ) = msg.sender.call{value: amountToReturn}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Unstaked(msg.sender, amountToReturn, stakeId);\\n    }\\n\\n    // \\u5141\\u8bb8\\u5408\\u7ea6\\u63a5\\u6536ETH (FIL)\\n    receive() external payable {}\\n\\n    // \\u83b7\\u53d6\\u7528\\u6237\\u5168\\u90e8\\u8d28\\u62bc\\u8bb0\\u5f55\\u7684\\u4fe1\\u606f\\uff0c\\u8fd4\\u56de\\u4e00\\u4e2a\\u5305\\u542b\\u6240\\u6709\\u8d28\\u62bc\\u4fe1\\u606f\\u7684\\u6570\\u7ec4\\u5bf9\\u8c61\\n    function getAllStakeInfo(address user) external view returns (StakeInfo[] memory) {\\n        uint256 stakeCount = stakes[user].length;\\n        StakeInfo[] memory allStakeInfo = new StakeInfo[](stakeCount); // \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u6570\\u7ec4\\n\\n        for (uint256 i = 0; i < stakeCount; i++) {\\n            Stake memory stakeInfo = stakes[user][i];\\n            allStakeInfo[i] = StakeInfo({\\n                stakeId: i,\\n                amount: stakeInfo.amount,\\n                startTime: stakeInfo.startTime,\\n                lockTime: stakeInfo.lockTime,\\n                active: stakeInfo.active\\n            });\\n        }\\n\\n        return allStakeInfo;\\n    }\\n\\n    // \\u83b7\\u53d6\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u8bb0\\u5f55\\u603b\\u6570\\n    function getStakeCount(address user) external view returns (uint256) {\\n        return stakes[user].length;\\n    }\\n}\",\"keccak256\":\"0xd3e78384a49849e37ffbd70657bfe5fb66151a97c1ea8aaa9cad712c6030bf54\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c8a806100206000396000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063d1d7e10a11610059578063d1d7e10a14610267578063e30c397814610283578063f158adf2146102a1578063f2fde38b146102b857600080fd5b80638da5cb5b146101e9578063bb224d6e1461021b578063cf57ee691461023157600080fd5b806361cbfa50116100bb57806361cbfa5014610187578063715018a6146101ac57806379ba5097146101c15780637b0472f0146101d657600080fd5b8063559566b9146100ed578063584b62a1146101235780636198e3391461016557600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610a90565b6102d8565b60405161011a9190610ab2565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004610b22565b610470565b604080519485526020850193909352918301521515606082015260800161011a565b34801561017157600080fd5b50610185610180366004610b4c565b6104b9565b005b34801561019357600080fd5b5061019e6234bc0081565b60405190815260200161011a565b3480156101b857600080fd5b506101856106ca565b3480156101cd57600080fd5b506101856106de565b6101856101e4366004610b65565b610758565b3480156101f557600080fd5b506033546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b34801561022757600080fd5b5061019e61080081565b34801561023d57600080fd5b5061019e61024c366004610a90565b6001600160a01b031660009081526097602052604090205490565b34801561027357600080fd5b5061019e670de0b6b3a764000081565b34801561028f57600080fd5b506065546001600160a01b0316610203565b3480156102ad57600080fd5b5061019e621a5e0081565b3480156102c457600080fd5b506101856102d3366004610a90565b610943565b6001600160a01b0381166000908152609760205260408120546060918167ffffffffffffffff81111561030d5761030d610b87565b60405190808252806020026020018201604052801561037257816020015b61035f6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b81526020019060019003908161032b5790505b50905060005b82811015610468576001600160a01b03851660009081526097602052604081208054839081106103aa576103aa610b9d565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506040518060a001604052808381526020018260000151815260200182602001518152602001826040015181526020018260600151151581525083838151811061044957610449610b9d565b602002602001018190525050808061046090610bc9565b915050610378565b509392505050565b6097602052816000526040600020818154811061048c57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919450925060ff1684565b33600090815260976020526040902054811061050e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cdd185ad95259608a1b60448201526064015b60405180910390fd5b33600090815260976020526040812080548390811061052f5761052f610b9d565b60009182526020909120600490910201600381015490915060ff166105965760405162461bcd60e51b815260206004820152601960248201527f5374616b6520697320616c726561647920756e6c6f636b6564000000000000006044820152606401610505565b806002015481600101546105aa9190610be4565b4210156105f15760405162461bcd60e51b815260206004820152601560248201527414dd185ad9481a5cc81cdd1a5b1b081b1bd8dad959605a1b6044820152606401610505565b805460038201805460ff19169055604051600090339083908381818185875af1925050503d8060008114610641576040519150601f19603f3d011682016040523d82523d6000602084013e610646565b606091505b50509050806106895760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610505565b604080518381526020810186905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a250505050565b6106d26109b4565b6106dc6000610a0e565b565b60655433906001600160a01b0316811461074c5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610505565b61075581610a0e565b50565b8015806107655750806001145b6107a65760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207374616b65207479706560701b6044820152606401610505565b6108008211156107e95760405162461bcd60e51b815260206004820152600e60248201526d45786365656473206d617820444360901b6044820152606401610505565b600081156107fa576234bc006107ff565b621a5e005b90506000670de0b6b3a7640000610817600a86610bfc565b6108219190610c1e565b9050803410156108735760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046494c20666f72207374616b696e67000000006044820152606401610505565b33600081815260976020818152604080842081516080810183523481524281850190815292810189815260016060830181815284548083018655858a52878a20945160049091029094019384559451838201559051600283015592516003909101805460ff1916911515919091179055948452919052915490916108f691610c3d565b604080513481526020810186905290810182905290915033907fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed9060600160405180910390a25050505050565b61094b6109b4565b606580546001600160a01b0383166001600160a01b0319909116811790915561097c6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146106dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610505565b606580546001600160a01b031916905561075581603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b0381168114610a8b57600080fd5b919050565b600060208284031215610aa257600080fd5b610aab82610a74565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610b1557815180518552868101518786015285810151868601526060808201519086015260809081015115159085015260a09093019290850190600101610acf565b5091979650505050505050565b60008060408385031215610b3557600080fd5b610b3e83610a74565b946020939093013593505050565b600060208284031215610b5e57600080fd5b5035919050565b60008060408385031215610b7857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610bdd57610bdd610bb3565b5060010190565b60008219821115610bf757610bf7610bb3565b500190565b600082610c1957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c3857610c38610bb3565b500290565b600082821015610c4f57610c4f610bb3565b50039056fea2646970667358221220dc0366237ce805ea1486026a151169494b3e32655f4a5e25d283917fd8b07e2664736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063d1d7e10a11610059578063d1d7e10a14610267578063e30c397814610283578063f158adf2146102a1578063f2fde38b146102b857600080fd5b80638da5cb5b146101e9578063bb224d6e1461021b578063cf57ee691461023157600080fd5b806361cbfa50116100bb57806361cbfa5014610187578063715018a6146101ac57806379ba5097146101c15780637b0472f0146101d657600080fd5b8063559566b9146100ed578063584b62a1146101235780636198e3391461016557600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610a90565b6102d8565b60405161011a9190610ab2565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004610b22565b610470565b604080519485526020850193909352918301521515606082015260800161011a565b34801561017157600080fd5b50610185610180366004610b4c565b6104b9565b005b34801561019357600080fd5b5061019e6234bc0081565b60405190815260200161011a565b3480156101b857600080fd5b506101856106ca565b3480156101cd57600080fd5b506101856106de565b6101856101e4366004610b65565b610758565b3480156101f557600080fd5b506033546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b34801561022757600080fd5b5061019e61080081565b34801561023d57600080fd5b5061019e61024c366004610a90565b6001600160a01b031660009081526097602052604090205490565b34801561027357600080fd5b5061019e670de0b6b3a764000081565b34801561028f57600080fd5b506065546001600160a01b0316610203565b3480156102ad57600080fd5b5061019e621a5e0081565b3480156102c457600080fd5b506101856102d3366004610a90565b610943565b6001600160a01b0381166000908152609760205260408120546060918167ffffffffffffffff81111561030d5761030d610b87565b60405190808252806020026020018201604052801561037257816020015b61035f6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b81526020019060019003908161032b5790505b50905060005b82811015610468576001600160a01b03851660009081526097602052604081208054839081106103aa576103aa610b9d565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506040518060a001604052808381526020018260000151815260200182602001518152602001826040015181526020018260600151151581525083838151811061044957610449610b9d565b602002602001018190525050808061046090610bc9565b915050610378565b509392505050565b6097602052816000526040600020818154811061048c57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919450925060ff1684565b33600090815260976020526040902054811061050e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cdd185ad95259608a1b60448201526064015b60405180910390fd5b33600090815260976020526040812080548390811061052f5761052f610b9d565b60009182526020909120600490910201600381015490915060ff166105965760405162461bcd60e51b815260206004820152601960248201527f5374616b6520697320616c726561647920756e6c6f636b6564000000000000006044820152606401610505565b806002015481600101546105aa9190610be4565b4210156105f15760405162461bcd60e51b815260206004820152601560248201527414dd185ad9481a5cc81cdd1a5b1b081b1bd8dad959605a1b6044820152606401610505565b805460038201805460ff19169055604051600090339083908381818185875af1925050503d8060008114610641576040519150601f19603f3d011682016040523d82523d6000602084013e610646565b606091505b50509050806106895760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610505565b604080518381526020810186905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a250505050565b6106d26109b4565b6106dc6000610a0e565b565b60655433906001600160a01b0316811461074c5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610505565b61075581610a0e565b50565b8015806107655750806001145b6107a65760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207374616b65207479706560701b6044820152606401610505565b6108008211156107e95760405162461bcd60e51b815260206004820152600e60248201526d45786365656473206d617820444360901b6044820152606401610505565b600081156107fa576234bc006107ff565b621a5e005b90506000670de0b6b3a7640000610817600a86610bfc565b6108219190610c1e565b9050803410156108735760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046494c20666f72207374616b696e67000000006044820152606401610505565b33600081815260976020818152604080842081516080810183523481524281850190815292810189815260016060830181815284548083018655858a52878a20945160049091029094019384559451838201559051600283015592516003909101805460ff1916911515919091179055948452919052915490916108f691610c3d565b604080513481526020810186905290810182905290915033907fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed9060600160405180910390a25050505050565b61094b6109b4565b606580546001600160a01b0383166001600160a01b0319909116811790915561097c6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146106dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610505565b606580546001600160a01b031916905561075581603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b0381168114610a8b57600080fd5b919050565b600060208284031215610aa257600080fd5b610aab82610a74565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610b1557815180518552868101518786015285810151868601526060808201519086015260809081015115159085015260a09093019290850190600101610acf565b5091979650505050505050565b60008060408385031215610b3557600080fd5b610b3e83610a74565b946020939093013593505050565b600060208284031215610b5e57600080fd5b5035919050565b60008060408385031215610b7857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610bdd57610bdd610bb3565b5060010190565b60008219821115610bf757610bf7610bb3565b500190565b600082610c1957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c3857610c38610bb3565b500290565b600082821015610c4f57610c4f610bb3565b50039056fea2646970667358221220dc0366237ce805ea1486026a151169494b3e32655f4a5e25d283917fd8b07e2664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 731,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 763,
        "contract": "contracts/DcPayChannel.sol:DcPayChannel",
        "label": "stakes",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_array(t_struct(Stake)746_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stake)746_storage)dyn_storage": {
        "base": "t_struct(Stake)746_storage",
        "encoding": "dynamic_array",
        "label": "struct DcPayChannel.Stake[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(Stake)746_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DcPayChannel.Stake[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Stake)746_storage)dyn_storage"
      },
      "t_struct(Stake)746_storage": {
        "encoding": "inplace",
        "label": "struct DcPayChannel.Stake",
        "members": [
          {
            "astId": 739,
            "contract": "contracts/DcPayChannel.sol:DcPayChannel",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 741,
            "contract": "contracts/DcPayChannel.sol:DcPayChannel",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 743,
            "contract": "contracts/DcPayChannel.sol:DcPayChannel",
            "label": "lockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 745,
            "contract": "contracts/DcPayChannel.sol:DcPayChannel",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}