{"id":"f2c7aed932057d0a6475776f6c56c03d","_format":"hh-sol-build-info-1","solcVersion":"0.8.9","solcLongVersion":"0.8.9+commit.e5eed63a","input":{"language":"Solidity","sources":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() external {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"},"contracts/DcPayChannel.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\n\ncontract DcPayChannel is Ownable2StepUpgradeable{\n    // 质押的信息结构\n    struct Stake {\n        uint256 amount;      // 质押FIL数量\n        uint256 startTime;   // 质押开始时间\n        uint256 lockTime;    // 锁定时间，20天或40天\n        bool active;         // 质押是否有效\n    }\n\n    // 用户的质押记录结构，用于返回全部质押信息\n    struct StakeInfo {\n        uint256 stakeId;     // 质押ID\n        uint256 amount;      // 质押FIL数量\n        uint256 startTime;   // 质押开始时间\n        uint256 lockTime;    // 锁定时间\n        bool active;         // 质押是否有效\n    }\n\n    // 每个地址可以有多条质押记录，使用数组\n    mapping(address => Stake[]) public stakes; // 每个地址对应一个质押数组\n\n    // 质押比例和最大申请量\n    uint256 public constant FIL_PER_10T = 1 ether; // 10T的DC需要1FIL\n    uint256 public constant MAX_DC = 2 * 1024;     // 最大2P\n\n    // 锁定时间常量\n    uint256 public constant LOCK_TIME_20_DAYS = 20 days;\n    uint256 public constant LOCK_TIME_40_DAYS = 40 days;\n\n    event Staked(address indexed user, uint256 amount, uint256 lockTime, uint256 stakeId);\n    event Unstaked(address indexed user, uint256 amount, uint256 stakeId);\n\n    // 质押功能\n    function stake(uint256 dcAmount, uint256 stakeType) external payable {\n        require(stakeType == 0 || stakeType == 1, \"Invalid stake type\");\n        require(dcAmount <= MAX_DC, \"Exceeds max DC\");\n\n        // 根据质押类型确定锁定时间\n        uint256 lockTime = (stakeType == 0) ? LOCK_TIME_20_DAYS : LOCK_TIME_40_DAYS;\n\n        // 计算所需FIL质押数量\n        uint256 requiredFil = (dcAmount / 10) * FIL_PER_10T;\n        require(msg.value >= requiredFil, \"Insufficient FIL for staking\");\n\n        // 存储质押信息到用户的质押记录数组中\n        stakes[msg.sender].push(Stake({\n            amount: msg.value,\n            startTime: block.timestamp,\n            lockTime: lockTime,\n            active: true\n        }));\n\n        // 获取质押的ID\n        uint256 stakeId = stakes[msg.sender].length - 1;\n\n        emit Staked(msg.sender, msg.value, lockTime, stakeId);\n    }\n\n    // 解锁功能，通过质押记录ID解锁\n    function unlock(uint256 stakeId) external {\n        require(stakeId < stakes[msg.sender].length, \"Invalid stakeId\");\n\n        Stake storage userStake = stakes[msg.sender][stakeId];\n        require(userStake.active, \"Stake is already unlocked\");\n        require(block.timestamp >= userStake.startTime + userStake.lockTime, \"Stake is still locked\");\n\n        uint256 amountToReturn = userStake.amount;\n        userStake.active = false; // 将该质押标记为无效\n\n        // 返还质押的FIL\n        (bool success, ) = msg.sender.call{value: amountToReturn}(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Unstaked(msg.sender, amountToReturn, stakeId);\n    }\n\n    // 允许合约接收ETH (FIL)\n    receive() external payable {}\n\n    // 获取用户全部质押记录的信息，返回一个包含所有质押信息的数组对象\n    function getAllStakeInfo(address user) external view returns (StakeInfo[] memory) {\n        uint256 stakeCount = stakes[user].length;\n        StakeInfo[] memory allStakeInfo = new StakeInfo[](stakeCount); // 创建一个新的数组\n\n        for (uint256 i = 0; i < stakeCount; i++) {\n            Stake memory stakeInfo = stakes[user][i];\n            allStakeInfo[i] = StakeInfo({\n                stakeId: i,\n                amount: stakeInfo.amount,\n                startTime: stakeInfo.startTime,\n                lockTime: stakeInfo.lockTime,\n                active: stakeInfo.active\n            });\n        }\n\n        return allStakeInfo;\n    }\n\n    // 获取用户的质押记录总数\n    function getStakeCount(address user) external view returns (uint256) {\n        return stakes[user].length;\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[690],"ContextUpgradeable":[732],"Initializable":[406],"Ownable2StepUpgradeable":[105],"OwnableUpgradeable":[237]},"id":106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:0"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","file":"./OwnableUpgradeable.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":106,"sourceUnit":238,"src":"132:34:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":106,"sourceUnit":407,"src":"167:42:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":406,"src":"698:13:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"698:13:0"},{"baseName":{"id":7,"name":"OwnableUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":237,"src":"713:18:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"713:18:0"}],"canonicalName":"Ownable2StepUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"211:441:0","text":" @dev Contract module which provides access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership} and {acceptOwnership}.\n This module is used through inheritance. It will make available all functions\n from parent (Ownable)."},"fullyImplemented":true,"id":105,"linearizedBaseContracts":[105,237,732,406],"name":"Ownable2StepUpgradeable","nameLocation":"671:23:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":16,"nodeType":"Block","src":"795:43:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":13,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"805:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":14,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"805:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":15,"nodeType":"ExpressionStatement","src":"805:26:0"}]},"id":17,"implemented":true,"kind":"function","modifiers":[{"id":11,"kind":"modifierInvocation","modifierName":{"id":10,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":351,"src":"778:16:0"},"nodeType":"ModifierInvocation","src":"778:16:0"}],"name":"__Ownable2Step_init","nameLocation":"747:19:0","nodeType":"FunctionDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"766:2:0"},"returnParameters":{"id":12,"nodeType":"ParameterList","parameters":[],"src":"795:0:0"},"scope":105,"src":"738:100:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":22,"nodeType":"Block","src":"911:7:0","statements":[]},"id":23,"implemented":true,"kind":"function","modifiers":[{"id":20,"kind":"modifierInvocation","modifierName":{"id":19,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":351,"src":"894:16:0"},"nodeType":"ModifierInvocation","src":"894:16:0"}],"name":"__Ownable2Step_init_unchained","nameLocation":"853:29:0","nodeType":"FunctionDefinition","parameters":{"id":18,"nodeType":"ParameterList","parameters":[],"src":"882:2:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"911:0:0"},"scope":105,"src":"844:74:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":25,"mutability":"mutable","name":"_pendingOwner","nameLocation":"939:13:0","nodeType":"VariableDeclaration","scope":105,"src":"923:29:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":24,"name":"address","nodeType":"ElementaryTypeName","src":"923:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":31,"name":"OwnershipTransferStarted","nameLocation":"965:24:0","nodeType":"EventDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1006:13:0","nodeType":"VariableDeclaration","scope":31,"src":"990:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"990:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":29,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1037:8:0","nodeType":"VariableDeclaration","scope":31,"src":"1021:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":28,"name":"address","nodeType":"ElementaryTypeName","src":"1021:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"989:57:0"},"src":"959:88:0"},{"body":{"id":39,"nodeType":"Block","src":"1185:37:0","statements":[{"expression":{"id":37,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"1202:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1195:20:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1053:65:0","text":" @dev Returns the address of the pending owner."},"functionSelector":"e30c3978","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"pendingOwner","nameLocation":"1132:12:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1144:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1176:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1175:9:0"},"scope":105,"src":"1123:99:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[211],"body":{"id":59,"nodeType":"Block","src":"1494:99:0","statements":[{"expression":{"id":51,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":49,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"1504:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":50,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"1520:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1504:24:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":52,"nodeType":"ExpressionStatement","src":"1504:24:0"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":54,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1568:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":55,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1568:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":56,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"1577:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":53,"name":"OwnershipTransferStarted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1543:24:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1543:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":58,"nodeType":"EmitStatement","src":"1538:48:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1228:182:0","text":" @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":60,"implemented":true,"kind":"function","modifiers":[{"id":47,"kind":"modifierInvocation","modifierName":{"id":46,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":151,"src":"1484:9:0"},"nodeType":"ModifierInvocation","src":"1484:9:0"}],"name":"transferOwnership","nameLocation":"1424:17:0","nodeType":"FunctionDefinition","overrides":{"id":45,"nodeType":"OverrideSpecifier","overrides":[],"src":"1475:8:0"},"parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"newOwner","nameLocation":"1450:8:0","nodeType":"VariableDeclaration","scope":60,"src":"1442:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":42,"name":"address","nodeType":"ElementaryTypeName","src":"1442:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1441:18:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[],"src":"1494:0:0"},"scope":105,"src":"1415:178:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[231],"body":{"id":76,"nodeType":"Block","src":"1849:81:0","statements":[{"expression":{"id":68,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"1859:20:0","subExpression":{"id":67,"name":"_pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":25,"src":"1866:13:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":69,"nodeType":"ExpressionStatement","src":"1859:20:0"},{"expression":{"arguments":[{"id":73,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"1914:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":70,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1889:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Ownable2StepUpgradeable_$105_$","typeString":"type(contract super Ownable2StepUpgradeable)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"_transferOwnership","nodeType":"MemberAccess","referencedDeclaration":231,"src":"1889:24:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1889:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":75,"nodeType":"ExpressionStatement","src":"1889:34:0"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"1599:173:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n Internal function without access restriction."},"id":77,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"1786:18:0","nodeType":"FunctionDefinition","overrides":{"id":65,"nodeType":"OverrideSpecifier","overrides":[],"src":"1840:8:0"},"parameters":{"id":64,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"newOwner","nameLocation":"1813:8:0","nodeType":"VariableDeclaration","scope":77,"src":"1805:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":62,"name":"address","nodeType":"ElementaryTypeName","src":"1805:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1804:18:0"},"returnParameters":{"id":66,"nodeType":"ParameterList","parameters":[],"src":"1849:0:0"},"scope":105,"src":"1777:153:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":98,"nodeType":"Block","src":"2046:170:0","statements":[{"assignments":[82],"declarations":[{"constant":false,"id":82,"mutability":"mutable","name":"sender","nameLocation":"2064:6:0","nodeType":"VariableDeclaration","scope":98,"src":"2056:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"2056:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":85,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":83,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"2073:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2073:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2056:29:0"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"pendingOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"2103:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2103:14:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":89,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2121:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2103:24:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206e6577206f776e6572","id":91,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2129:43:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""},"value":"Ownable2Step: caller is not the new owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc","typeString":"literal_string \"Ownable2Step: caller is not the new owner\""}],"id":86,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2095:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":92,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2095:78:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":93,"nodeType":"ExpressionStatement","src":"2095:78:0"},{"expression":{"arguments":[{"id":95,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"2202:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":94,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[77],"referencedDeclaration":77,"src":"2183:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2183:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":97,"nodeType":"ExpressionStatement","src":"2183:26:0"}]},"documentation":{"id":78,"nodeType":"StructuredDocumentation","src":"1936:69:0","text":" @dev The new owner accepts the ownership transfer."},"functionSelector":"79ba5097","id":99,"implemented":true,"kind":"function","modifiers":[],"name":"acceptOwnership","nameLocation":"2019:15:0","nodeType":"FunctionDefinition","parameters":{"id":79,"nodeType":"ParameterList","parameters":[],"src":"2034:2:0"},"returnParameters":{"id":80,"nodeType":"ParameterList","parameters":[],"src":"2046:0:0"},"scope":105,"src":"2010:206:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"constant":false,"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"2222:254:0","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":104,"mutability":"mutable","name":"__gap","nameLocation":"2501:5:0","nodeType":"VariableDeclaration","scope":105,"src":"2481:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":101,"name":"uint256","nodeType":"ElementaryTypeName","src":"2481:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":103,"length":{"hexValue":"3439","id":102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2489:2:0","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"2481:11:0","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":106,"src":"653:1856:0","usedErrors":[]}],"src":"107:2403:0"},"id":0},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[690],"ContextUpgradeable":[732],"Initializable":[406],"OwnableUpgradeable":[237]},"id":238,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":107,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:1"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","file":"../utils/ContextUpgradeable.sol","id":108,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":238,"sourceUnit":733,"src":"127:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":109,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":238,"sourceUnit":407,"src":"169:42:1","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":111,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":406,"src":"748:13:1"},"id":112,"nodeType":"InheritanceSpecifier","src":"748:13:1"},{"baseName":{"id":113,"name":"ContextUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":732,"src":"763:18:1"},"id":114,"nodeType":"InheritanceSpecifier","src":"763:18:1"}],"canonicalName":"OwnableUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"213:494:1","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":237,"linearizedBaseContracts":[237,732,406],"name":"OwnableUpgradeable","nameLocation":"726:18:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":116,"mutability":"mutable","name":"_owner","nameLocation":"804:6:1","nodeType":"VariableDeclaration","scope":237,"src":"788:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"788:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"id":122,"name":"OwnershipTransferred","nameLocation":"823:20:1","nodeType":"EventDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"860:13:1","nodeType":"VariableDeclaration","scope":122,"src":"844:29:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"844:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":120,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"891:8:1","nodeType":"VariableDeclaration","scope":122,"src":"875:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":119,"name":"address","nodeType":"ElementaryTypeName","src":"875:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"843:57:1"},"src":"817:84:1"},{"body":{"id":131,"nodeType":"Block","src":"1055:43:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":128,"name":"__Ownable_init_unchained","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"1065:24:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1065:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1065:26:1"}]},"documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"907:91:1","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":132,"implemented":true,"kind":"function","modifiers":[{"id":126,"kind":"modifierInvocation","modifierName":{"id":125,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":351,"src":"1038:16:1"},"nodeType":"ModifierInvocation","src":"1038:16:1"}],"name":"__Ownable_init","nameLocation":"1012:14:1","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[],"src":"1026:2:1"},"returnParameters":{"id":127,"nodeType":"ParameterList","parameters":[],"src":"1055:0:1"},"scope":237,"src":"1003:95:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":142,"nodeType":"Block","src":"1166:49:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":138,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"1195:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1195:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":137,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"1176:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1176:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":141,"nodeType":"ExpressionStatement","src":"1176:32:1"}]},"id":143,"implemented":true,"kind":"function","modifiers":[{"id":135,"kind":"modifierInvocation","modifierName":{"id":134,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":351,"src":"1149:16:1"},"nodeType":"ModifierInvocation","src":"1149:16:1"}],"name":"__Ownable_init_unchained","nameLocation":"1113:24:1","nodeType":"FunctionDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"1137:2:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"1166:0:1"},"scope":237,"src":"1104:111:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":150,"nodeType":"Block","src":"1324:41:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":146,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":174,"src":"1334:11:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1334:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":148,"nodeType":"ExpressionStatement","src":"1334:13:1"},{"id":149,"nodeType":"PlaceholderStatement","src":"1357:1:1"}]},"documentation":{"id":144,"nodeType":"StructuredDocumentation","src":"1221:77:1","text":" @dev Throws if called by any account other than the owner."},"id":151,"name":"onlyOwner","nameLocation":"1312:9:1","nodeType":"ModifierDefinition","parameters":{"id":145,"nodeType":"ParameterList","parameters":[],"src":"1321:2:1"},"src":"1303:62:1","virtual":false,"visibility":"internal"},{"body":{"id":159,"nodeType":"Block","src":"1496:30:1","statements":[{"expression":{"id":157,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"1513:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":156,"id":158,"nodeType":"Return","src":"1506:13:1"}]},"documentation":{"id":152,"nodeType":"StructuredDocumentation","src":"1371:65:1","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":160,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1450:5:1","nodeType":"FunctionDefinition","parameters":{"id":153,"nodeType":"ParameterList","parameters":[],"src":"1455:2:1"},"returnParameters":{"id":156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":155,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":160,"src":"1487:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":154,"name":"address","nodeType":"ElementaryTypeName","src":"1487:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1486:9:1"},"scope":237,"src":"1441:85:1","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":173,"nodeType":"Block","src":"1644:85:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":165,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1662:5:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1662:7:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":167,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"1673:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1673:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1662:23:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1687:34:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":164,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1654:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1654:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":172,"nodeType":"ExpressionStatement","src":"1654:68:1"}]},"documentation":{"id":161,"nodeType":"StructuredDocumentation","src":"1532:62:1","text":" @dev Throws if the sender is not the owner."},"id":174,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1608:11:1","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[],"src":"1619:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[],"src":"1644:0:1"},"scope":237,"src":"1599:130:1","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":187,"nodeType":"Block","src":"2125:47:1","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2162:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":182,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2154:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":181,"name":"address","nodeType":"ElementaryTypeName","src":"2154:7:1","typeDescriptions":{}}},"id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2154:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":180,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2135:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":185,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2135:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":186,"nodeType":"ExpressionStatement","src":"2135:30:1"}]},"documentation":{"id":175,"nodeType":"StructuredDocumentation","src":"1735:331:1","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":188,"implemented":true,"kind":"function","modifiers":[{"id":178,"kind":"modifierInvocation","modifierName":{"id":177,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2115:9:1"},"nodeType":"ModifierInvocation","src":"2115:9:1"}],"name":"renounceOwnership","nameLocation":"2080:17:1","nodeType":"FunctionDefinition","parameters":{"id":176,"nodeType":"ParameterList","parameters":[],"src":"2097:2:1"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"2125:0:1"},"scope":237,"src":"2071:101:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":210,"nodeType":"Block","src":"2391:128:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":197,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2409:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2429:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2421:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":198,"name":"address","nodeType":"ElementaryTypeName","src":"2421:7:1","typeDescriptions":{}}},"id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2421:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2409:22:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2433:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":196,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2401:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2401:73:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":205,"nodeType":"ExpressionStatement","src":"2401:73:1"},{"expression":{"arguments":[{"id":207,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"2503:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":206,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2484:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2484:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":209,"nodeType":"ExpressionStatement","src":"2484:28:1"}]},"documentation":{"id":189,"nodeType":"StructuredDocumentation","src":"2178:138:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":211,"implemented":true,"kind":"function","modifiers":[{"id":194,"kind":"modifierInvocation","modifierName":{"id":193,"name":"onlyOwner","nodeType":"IdentifierPath","referencedDeclaration":151,"src":"2381:9:1"},"nodeType":"ModifierInvocation","src":"2381:9:1"}],"name":"transferOwnership","nameLocation":"2330:17:1","nodeType":"FunctionDefinition","parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":191,"mutability":"mutable","name":"newOwner","nameLocation":"2356:8:1","nodeType":"VariableDeclaration","scope":211,"src":"2348:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"2348:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2347:18:1"},"returnParameters":{"id":195,"nodeType":"ParameterList","parameters":[],"src":"2391:0:1"},"scope":237,"src":"2321:198:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":230,"nodeType":"Block","src":"2736:124:1","statements":[{"assignments":[218],"declarations":[{"constant":false,"id":218,"mutability":"mutable","name":"oldOwner","nameLocation":"2754:8:1","nodeType":"VariableDeclaration","scope":230,"src":"2746:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":217,"name":"address","nodeType":"ElementaryTypeName","src":"2746:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":220,"initialValue":{"id":219,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2765:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2746:25:1"},{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":221,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"2781:6:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":222,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2790:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2781:17:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":224,"nodeType":"ExpressionStatement","src":"2781:17:1"},{"eventCall":{"arguments":[{"id":226,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"2834:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":227,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"2844:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":225,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":122,"src":"2813:20:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2813:40:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":229,"nodeType":"EmitStatement","src":"2808:45:1"}]},"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"2525:143:1","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":231,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2682:18:1","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"newOwner","nameLocation":"2709:8:1","nodeType":"VariableDeclaration","scope":231,"src":"2701:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"2701:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2700:18:1"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"2736:0:1"},"scope":237,"src":"2673:187:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":232,"nodeType":"StructuredDocumentation","src":"2866:254:1","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":236,"mutability":"mutable","name":"__gap","nameLocation":"3145:5:1","nodeType":"VariableDeclaration","scope":237,"src":"3125:25:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage","typeString":"uint256[49]"},"typeName":{"baseType":{"id":233,"name":"uint256","nodeType":"ElementaryTypeName","src":"3125:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":235,"length":{"hexValue":"3439","id":234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3133:2:1","typeDescriptions":{"typeIdentifier":"t_rational_49_by_1","typeString":"int_const 49"},"value":"49"},"nodeType":"ArrayTypeName","src":"3125:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$49_storage_ptr","typeString":"uint256[49]"}},"visibility":"private"}],"scope":238,"src":"708:2445:1","usedErrors":[]}],"src":"102:3052:1"},"id":1},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","exportedSymbols":{"AddressUpgradeable":[690],"Initializable":[406]},"id":407,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":239,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"113:23:2"},{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","file":"../../utils/AddressUpgradeable.sol","id":240,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":407,"sourceUnit":691,"src":"138:44:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"Initializable","contractDependencies":[],"contractKind":"contract","documentation":{"id":241,"nodeType":"StructuredDocumentation","src":"184:2198:2","text":" @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="},"fullyImplemented":true,"id":406,"linearizedBaseContracts":[406],"name":"Initializable","nameLocation":"2401:13:2","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":242,"nodeType":"StructuredDocumentation","src":"2421:109:2","text":" @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"},"id":244,"mutability":"mutable","name":"_initialized","nameLocation":"2549:12:2","nodeType":"VariableDeclaration","scope":406,"src":"2535:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":243,"name":"uint8","nodeType":"ElementaryTypeName","src":"2535:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"constant":false,"documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"2568:91:2","text":" @dev Indicates that the contract is in the process of being initialized."},"id":247,"mutability":"mutable","name":"_initializing","nameLocation":"2677:13:2","nodeType":"VariableDeclaration","scope":406,"src":"2664:26:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":246,"name":"bool","nodeType":"ElementaryTypeName","src":"2664:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"2697:90:2","text":" @dev Triggered when the contract has been initialized or reinitialized."},"id":252,"name":"Initialized","nameLocation":"2798:11:2","nodeType":"EventDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"indexed":false,"mutability":"mutable","name":"version","nameLocation":"2816:7:2","nodeType":"VariableDeclaration","scope":252,"src":"2810:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":249,"name":"uint8","nodeType":"ElementaryTypeName","src":"2810:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2809:15:2"},"src":"2792:33:2"},{"body":{"id":307,"nodeType":"Block","src":"3258:483:2","statements":[{"assignments":[256],"declarations":[{"constant":false,"id":256,"mutability":"mutable","name":"isTopLevelCall","nameLocation":"3273:14:2","nodeType":"VariableDeclaration","scope":307,"src":"3268:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":255,"name":"bool","nodeType":"ElementaryTypeName","src":"3268:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":259,"initialValue":{"id":258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3290:14:2","subExpression":{"id":257,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"3291:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3268:36:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":261,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3336:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":262,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"3354:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3369:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3354:16:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3336:34:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":266,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3335:36:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3376:45:2","subExpression":{"arguments":[{"arguments":[{"id":271,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3415:4:2","typeDescriptions":{"typeIdentifier":"t_contract$_Initializable_$406","typeString":"contract Initializable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Initializable_$406","typeString":"contract Initializable"}],"id":270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3407:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"3407:7:2","typeDescriptions":{}}},"id":272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3407:13:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":267,"name":"AddressUpgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"3377:18:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AddressUpgradeable_$690_$","typeString":"type(library AddressUpgradeable)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":424,"src":"3377:29:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3377:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":275,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"3425:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3441:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3425:17:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3376:66:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":279,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3375:68:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3335:108:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3457:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":260,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3314:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3314:201:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":283,"nodeType":"ExpressionStatement","src":"3314:201:2"},{"expression":{"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":284,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"3525:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"31","id":285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3540:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3525:16:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":287,"nodeType":"ExpressionStatement","src":"3525:16:2"},{"condition":{"id":288,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3555:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":294,"nodeType":"IfStatement","src":"3551:65:2","trueBody":{"id":293,"nodeType":"Block","src":"3571:45:2","statements":[{"expression":{"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":289,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"3585:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3601:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3585:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":292,"nodeType":"ExpressionStatement","src":"3585:20:2"}]}},{"id":295,"nodeType":"PlaceholderStatement","src":"3625:1:2"},{"condition":{"id":296,"name":"isTopLevelCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3640:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":306,"nodeType":"IfStatement","src":"3636:99:2","trueBody":{"id":305,"nodeType":"Block","src":"3656:79:2","statements":[{"expression":{"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":297,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"3670:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3686:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3670:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":300,"nodeType":"ExpressionStatement","src":"3670:21:2"},{"eventCall":{"arguments":[{"hexValue":"31","id":302,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3722:1:2","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":301,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"3710:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3710:14:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":304,"nodeType":"EmitStatement","src":"3705:19:2"}]}}]},"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"2831:399:2","text":" @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n constructor.\n Emits an {Initialized} event."},"id":308,"name":"initializer","nameLocation":"3244:11:2","nodeType":"ModifierDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[],"src":"3255:2:2"},"src":"3235:506:2","virtual":false,"visibility":"internal"},{"body":{"id":340,"nodeType":"Block","src":"4852:255:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4870:14:2","subExpression":{"id":314,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"4871:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":316,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"4888:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":317,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"4903:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4888:22:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4870:40:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564","id":320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4912:48:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""},"value":"Initializable: contract is already initialized"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759","typeString":"literal_string \"Initializable: contract is already initialized\""}],"id":313,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4862:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4862:99:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":322,"nodeType":"ExpressionStatement","src":"4862:99:2"},{"expression":{"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":323,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"4971:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":324,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"4986:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"4971:22:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":326,"nodeType":"ExpressionStatement","src":"4971:22:2"},{"expression":{"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":327,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"5003:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5019:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5003:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":330,"nodeType":"ExpressionStatement","src":"5003:20:2"},{"id":331,"nodeType":"PlaceholderStatement","src":"5033:1:2"},{"expression":{"id":334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":332,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"5044:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5060:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"5044:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":335,"nodeType":"ExpressionStatement","src":"5044:21:2"},{"eventCall":{"arguments":[{"id":337,"name":"version","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"5092:7:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":336,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"5080:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5080:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":339,"nodeType":"EmitStatement","src":"5075:25:2"}]},"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"3747:1062:2","text":" @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: setting the version to 255 will prevent any future reinitialization.\n Emits an {Initialized} event."},"id":341,"name":"reinitializer","nameLocation":"4823:13:2","nodeType":"ModifierDefinition","parameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"version","nameLocation":"4843:7:2","nodeType":"VariableDeclaration","scope":341,"src":"4837:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":310,"name":"uint8","nodeType":"ElementaryTypeName","src":"4837:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"4836:15:2"},"src":"4814:293:2","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"5345:97:2","statements":[{"expression":{"arguments":[{"id":345,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"5363:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67","id":346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5378:45:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""},"value":"Initializable: contract is not initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b","typeString":"literal_string \"Initializable: contract is not initializing\""}],"id":344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5355:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5355:69:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"ExpressionStatement","src":"5355:69:2"},{"id":349,"nodeType":"PlaceholderStatement","src":"5434:1:2"}]},"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"5113:199:2","text":" @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."},"id":351,"name":"onlyInitializing","nameLocation":"5326:16:2","nodeType":"ModifierDefinition","parameters":{"id":343,"nodeType":"ParameterList","parameters":[],"src":"5342:2:2"},"src":"5317:125:2","virtual":false,"visibility":"internal"},{"body":{"id":386,"nodeType":"Block","src":"5977:230:2","statements":[{"expression":{"arguments":[{"id":357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5995:14:2","subExpression":{"id":356,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"5996:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67","id":358,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6011:41:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""},"value":"Initializable: contract is initializing"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a","typeString":"literal_string \"Initializable: contract is initializing\""}],"id":355,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5987:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5987:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":360,"nodeType":"ExpressionStatement","src":"5987:66:2"},{"condition":{"commonType":{"typeIdentifier":"t_uint8","typeString":"uint8"},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":361,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"6067:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6087:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":363,"name":"uint8","nodeType":"ElementaryTypeName","src":"6087:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":362,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6082:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6082:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6082:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6067:30:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":385,"nodeType":"IfStatement","src":"6063:138:2","trueBody":{"id":384,"nodeType":"Block","src":"6099:102:2","statements":[{"expression":{"id":374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":368,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"6113:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6133:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":370,"name":"uint8","nodeType":"ElementaryTypeName","src":"6133:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":369,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6128:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6128:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6128:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"6113:30:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":375,"nodeType":"ExpressionStatement","src":"6113:30:2"},{"eventCall":{"arguments":[{"expression":{"arguments":[{"id":379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6179:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":378,"name":"uint8","nodeType":"ElementaryTypeName","src":"6179:5:2","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"}],"id":377,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6174:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6174:11:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint8","typeString":"type(uint8)"}},"id":381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"max","nodeType":"MemberAccess","src":"6174:15:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":376,"name":"Initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"6162:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint8_$returns$__$","typeString":"function (uint8)"}},"id":382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6162:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":383,"nodeType":"EmitStatement","src":"6157:33:2"}]}}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"5448:475:2","text":" @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."},"id":387,"implemented":true,"kind":"function","modifiers":[],"name":"_disableInitializers","nameLocation":"5937:20:2","nodeType":"FunctionDefinition","parameters":{"id":353,"nodeType":"ParameterList","parameters":[],"src":"5957:2:2"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[],"src":"5977:0:2"},"scope":406,"src":"5928:279:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":395,"nodeType":"Block","src":"6384:36:2","statements":[{"expression":{"id":393,"name":"_initialized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":244,"src":"6401:12:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":392,"id":394,"nodeType":"Return","src":"6394:19:2"}]},"documentation":{"id":388,"nodeType":"StructuredDocumentation","src":"6213:102:2","text":" @dev Internal function that returns the initialized version. Returns `_initialized`"},"id":396,"implemented":true,"kind":"function","modifiers":[],"name":"_getInitializedVersion","nameLocation":"6329:22:2","nodeType":"FunctionDefinition","parameters":{"id":389,"nodeType":"ParameterList","parameters":[],"src":"6351:2:2"},"returnParameters":{"id":392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":396,"src":"6377:5:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":390,"name":"uint8","nodeType":"ElementaryTypeName","src":"6377:5:2","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"6376:7:2"},"scope":406,"src":"6320:100:2","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":404,"nodeType":"Block","src":"6590:37:2","statements":[{"expression":{"id":402,"name":"_initializing","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":247,"src":"6607:13:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":401,"id":403,"nodeType":"Return","src":"6600:20:2"}]},"documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"6426:103:2","text":" @dev Internal function that returns the initialized version. Returns `_initializing`"},"id":405,"implemented":true,"kind":"function","modifiers":[],"name":"_isInitializing","nameLocation":"6543:15:2","nodeType":"FunctionDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[],"src":"6558:2:2"},"returnParameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":405,"src":"6584:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":399,"name":"bool","nodeType":"ElementaryTypeName","src":"6584:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6583:6:2"},"scope":406,"src":"6534:93:2","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":407,"src":"2383:4246:2","usedErrors":[]}],"src":"113:6517:2"},"id":2},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[690]},"id":691,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":408,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:3"},{"abstract":false,"baseContracts":[],"canonicalName":"AddressUpgradeable","contractDependencies":[],"contractKind":"library","documentation":{"id":409,"nodeType":"StructuredDocumentation","src":"126:67:3","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":690,"linearizedBaseContracts":[690],"name":"AddressUpgradeable","nameLocation":"202:18:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":423,"nodeType":"Block","src":"1252:254:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":417,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1476:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"code","nodeType":"MemberAccess","src":"1476:12:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"1476:19:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1498:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1476:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":416,"id":422,"nodeType":"Return","src":"1469:30:3"}]},"documentation":{"id":410,"nodeType":"StructuredDocumentation","src":"227:954:3","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":424,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1195:10:3","nodeType":"FunctionDefinition","parameters":{"id":413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"account","nameLocation":"1214:7:3","nodeType":"VariableDeclaration","scope":424,"src":"1206:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"1206:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1205:17:3"},"returnParameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":424,"src":"1246:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":414,"name":"bool","nodeType":"ElementaryTypeName","src":"1246:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1245:6:3"},"scope":690,"src":"1186:320:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":457,"nodeType":"Block","src":"2494:241:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":435,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2520:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$690","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$690","typeString":"library AddressUpgradeable"}],"id":434,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2512:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":433,"name":"address","nodeType":"ElementaryTypeName","src":"2512:7:3","typeDescriptions":{}}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2512:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2512:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":438,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"2537:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:31:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2545:31:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":432,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2504:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2504:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":442,"nodeType":"ExpressionStatement","src":"2504:73:3"},{"assignments":[444,null],"declarations":[{"constant":false,"id":444,"mutability":"mutable","name":"success","nameLocation":"2594:7:3","nodeType":"VariableDeclaration","scope":457,"src":"2589:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":443,"name":"bool","nodeType":"ElementaryTypeName","src":"2589:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":451,"initialValue":{"arguments":[{"hexValue":"","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2637:2:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":445,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"2607:9:3","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2607:14:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":447,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"2629:6:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2607:29:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2607:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2588:52:3"},{"expression":{"arguments":[{"id":453,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":444,"src":"2658:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2667:60:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":452,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2650:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2650:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":456,"nodeType":"ExpressionStatement","src":"2650:78:3"}]},"documentation":{"id":425,"nodeType":"StructuredDocumentation","src":"1512:906:3","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":458,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2432:9:3","nodeType":"FunctionDefinition","parameters":{"id":430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":427,"mutability":"mutable","name":"recipient","nameLocation":"2458:9:3","nodeType":"VariableDeclaration","scope":458,"src":"2442:25:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":426,"name":"address","nodeType":"ElementaryTypeName","src":"2442:15:3","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":429,"mutability":"mutable","name":"amount","nameLocation":"2477:6:3","nodeType":"VariableDeclaration","scope":458,"src":"2469:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":428,"name":"uint256","nodeType":"ElementaryTypeName","src":"2469:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2441:43:3"},"returnParameters":{"id":431,"nodeType":"ParameterList","parameters":[],"src":"2494:0:3"},"scope":690,"src":"2423:312:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":475,"nodeType":"Block","src":"3566:96:3","statements":[{"expression":{"arguments":[{"id":469,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":461,"src":"3605:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":470,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"3613:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3619:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3622:32:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":468,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[516,560],"referencedDeclaration":560,"src":"3583:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3583:72:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":467,"id":474,"nodeType":"Return","src":"3576:79:3"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"2741:731:3","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":476,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3486:12:3","nodeType":"FunctionDefinition","parameters":{"id":464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":461,"mutability":"mutable","name":"target","nameLocation":"3507:6:3","nodeType":"VariableDeclaration","scope":476,"src":"3499:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":460,"name":"address","nodeType":"ElementaryTypeName","src":"3499:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":463,"mutability":"mutable","name":"data","nameLocation":"3528:4:3","nodeType":"VariableDeclaration","scope":476,"src":"3515:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":462,"name":"bytes","nodeType":"ElementaryTypeName","src":"3515:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3498:35:3"},"returnParameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":476,"src":"3552:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":465,"name":"bytes","nodeType":"ElementaryTypeName","src":"3552:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3551:14:3"},"scope":690,"src":"3477:185:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":495,"nodeType":"Block","src":"4031:76:3","statements":[{"expression":{"arguments":[{"id":489,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"4070:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":490,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"4078:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4084:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":492,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"4087:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":488,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[516,560],"referencedDeclaration":560,"src":"4048:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4048:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":487,"id":494,"nodeType":"Return","src":"4041:59:3"}]},"documentation":{"id":477,"nodeType":"StructuredDocumentation","src":"3668:211:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":496,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3893:12:3","nodeType":"FunctionDefinition","parameters":{"id":484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"target","nameLocation":"3923:6:3","nodeType":"VariableDeclaration","scope":496,"src":"3915:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"3915:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"data","nameLocation":"3952:4:3","nodeType":"VariableDeclaration","scope":496,"src":"3939:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":480,"name":"bytes","nodeType":"ElementaryTypeName","src":"3939:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"errorMessage","nameLocation":"3980:12:3","nodeType":"VariableDeclaration","scope":496,"src":"3966:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":482,"name":"string","nodeType":"ElementaryTypeName","src":"3966:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3905:93:3"},"returnParameters":{"id":487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":496,"src":"4017:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":485,"name":"bytes","nodeType":"ElementaryTypeName","src":"4017:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4016:14:3"},"scope":690,"src":"3884:223:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":515,"nodeType":"Block","src":"4612:111:3","statements":[{"expression":{"arguments":[{"id":509,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"4651:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":510,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"4659:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":511,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"4665:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4672:43:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":508,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[516,560],"referencedDeclaration":560,"src":"4629:21:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"4629:87:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":507,"id":514,"nodeType":"Return","src":"4622:94:3"}]},"documentation":{"id":497,"nodeType":"StructuredDocumentation","src":"4113:351:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":516,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4478:21:3","nodeType":"FunctionDefinition","parameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"target","nameLocation":"4517:6:3","nodeType":"VariableDeclaration","scope":516,"src":"4509:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":498,"name":"address","nodeType":"ElementaryTypeName","src":"4509:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"data","nameLocation":"4546:4:3","nodeType":"VariableDeclaration","scope":516,"src":"4533:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":500,"name":"bytes","nodeType":"ElementaryTypeName","src":"4533:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":503,"mutability":"mutable","name":"value","nameLocation":"4568:5:3","nodeType":"VariableDeclaration","scope":516,"src":"4560:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":502,"name":"uint256","nodeType":"ElementaryTypeName","src":"4560:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4499:80:3"},"returnParameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":516,"src":"4598:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":505,"name":"bytes","nodeType":"ElementaryTypeName","src":"4598:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4597:14:3"},"scope":690,"src":"4469:254:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":559,"nodeType":"Block","src":"5150:267:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":533,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5176:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_AddressUpgradeable_$690","typeString":"library AddressUpgradeable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_AddressUpgradeable_$690","typeString":"library AddressUpgradeable"}],"id":532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5168:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":531,"name":"address","nodeType":"ElementaryTypeName","src":"5168:7:3","typeDescriptions":{}}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5168:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"5168:21:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":536,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"5193:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5168:30:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5200:40:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":530,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5160:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5160:81:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":540,"nodeType":"ExpressionStatement","src":"5160:81:3"},{"assignments":[542,544],"declarations":[{"constant":false,"id":542,"mutability":"mutable","name":"success","nameLocation":"5257:7:3","nodeType":"VariableDeclaration","scope":559,"src":"5252:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":541,"name":"bool","nodeType":"ElementaryTypeName","src":"5252:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":544,"mutability":"mutable","name":"returndata","nameLocation":"5279:10:3","nodeType":"VariableDeclaration","scope":559,"src":"5266:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":543,"name":"bytes","nodeType":"ElementaryTypeName","src":"5266:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":551,"initialValue":{"arguments":[{"id":549,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"5319:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":545,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"5293:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"5293:11:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":547,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"5312:5:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5293:25:3","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5293:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5251:73:3"},{"expression":{"arguments":[{"id":553,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"5368:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":554,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"5376:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":555,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"5385:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":556,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":525,"src":"5397:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":552,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"5341:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5341:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":529,"id":558,"nodeType":"Return","src":"5334:76:3"}]},"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"4729:237:3","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":560,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4980:21:3","nodeType":"FunctionDefinition","parameters":{"id":526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"target","nameLocation":"5019:6:3","nodeType":"VariableDeclaration","scope":560,"src":"5011:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":518,"name":"address","nodeType":"ElementaryTypeName","src":"5011:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"data","nameLocation":"5048:4:3","nodeType":"VariableDeclaration","scope":560,"src":"5035:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":520,"name":"bytes","nodeType":"ElementaryTypeName","src":"5035:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":523,"mutability":"mutable","name":"value","nameLocation":"5070:5:3","nodeType":"VariableDeclaration","scope":560,"src":"5062:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":522,"name":"uint256","nodeType":"ElementaryTypeName","src":"5062:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":525,"mutability":"mutable","name":"errorMessage","nameLocation":"5099:12:3","nodeType":"VariableDeclaration","scope":560,"src":"5085:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":524,"name":"string","nodeType":"ElementaryTypeName","src":"5085:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5001:116:3"},"returnParameters":{"id":529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":560,"src":"5136:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":527,"name":"bytes","nodeType":"ElementaryTypeName","src":"5136:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5135:14:3"},"scope":690,"src":"4971:446:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":576,"nodeType":"Block","src":"5694:97:3","statements":[{"expression":{"arguments":[{"id":571,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"5730:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":572,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":565,"src":"5738:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5744:39:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":570,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[577,606],"referencedDeclaration":606,"src":"5711:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"5711:73:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":569,"id":575,"nodeType":"Return","src":"5704:80:3"}]},"documentation":{"id":561,"nodeType":"StructuredDocumentation","src":"5423:166:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":577,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5603:18:3","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"target","nameLocation":"5630:6:3","nodeType":"VariableDeclaration","scope":577,"src":"5622:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":562,"name":"address","nodeType":"ElementaryTypeName","src":"5622:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":565,"mutability":"mutable","name":"data","nameLocation":"5651:4:3","nodeType":"VariableDeclaration","scope":577,"src":"5638:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":564,"name":"bytes","nodeType":"ElementaryTypeName","src":"5638:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5621:35:3"},"returnParameters":{"id":569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":577,"src":"5680:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":567,"name":"bytes","nodeType":"ElementaryTypeName","src":"5680:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5679:14:3"},"scope":690,"src":"5594:197:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":605,"nodeType":"Block","src":"6133:168:3","statements":[{"assignments":[590,592],"declarations":[{"constant":false,"id":590,"mutability":"mutable","name":"success","nameLocation":"6149:7:3","nodeType":"VariableDeclaration","scope":605,"src":"6144:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":589,"name":"bool","nodeType":"ElementaryTypeName","src":"6144:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":592,"mutability":"mutable","name":"returndata","nameLocation":"6171:10:3","nodeType":"VariableDeclaration","scope":605,"src":"6158:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":591,"name":"bytes","nodeType":"ElementaryTypeName","src":"6158:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":597,"initialValue":{"arguments":[{"id":595,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"6203:4:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":593,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"6185:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"staticcall","nodeType":"MemberAccess","src":"6185:17:3","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6185:23:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6143:65:3"},{"expression":{"arguments":[{"id":599,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"6252:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":600,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"6260:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":601,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"6269:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":602,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":584,"src":"6281:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":598,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"6225:26:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6225:69:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":588,"id":604,"nodeType":"Return","src":"6218:76:3"}]},"documentation":{"id":578,"nodeType":"StructuredDocumentation","src":"5797:173:3","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":606,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5984:18:3","nodeType":"FunctionDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"target","nameLocation":"6020:6:3","nodeType":"VariableDeclaration","scope":606,"src":"6012:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"6012:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":582,"mutability":"mutable","name":"data","nameLocation":"6049:4:3","nodeType":"VariableDeclaration","scope":606,"src":"6036:17:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":581,"name":"bytes","nodeType":"ElementaryTypeName","src":"6036:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":584,"mutability":"mutable","name":"errorMessage","nameLocation":"6077:12:3","nodeType":"VariableDeclaration","scope":606,"src":"6063:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":583,"name":"string","nodeType":"ElementaryTypeName","src":"6063:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6002:93:3"},"returnParameters":{"id":588,"nodeType":"ParameterList","parameters":[{"constant":false,"id":587,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":606,"src":"6119:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":586,"name":"bytes","nodeType":"ElementaryTypeName","src":"6119:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6118:14:3"},"scope":690,"src":"5975:326:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":644,"nodeType":"Block","src":"6783:434:3","statements":[{"condition":{"id":620,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"6797:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":642,"nodeType":"Block","src":"7153:58:3","statements":[{"expression":{"arguments":[{"id":638,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"7175:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":639,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"7187:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":637,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"7167:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7167:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":641,"nodeType":"ExpressionStatement","src":"7167:33:3"}]},"id":643,"nodeType":"IfStatement","src":"6793:418:3","trueBody":{"id":636,"nodeType":"Block","src":"6806:341:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":621,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"6824:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6824:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6845:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6824:22:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":633,"nodeType":"IfStatement","src":"6820:286:3","trueBody":{"id":632,"nodeType":"Block","src":"6848:258:3","statements":[{"expression":{"arguments":[{"arguments":[{"id":627,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"7050:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":626,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"7039:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7039:18:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7059:31:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":625,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7031:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7031:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"ExpressionStatement","src":"7031:60:3"}]}},{"expression":{"id":634,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":613,"src":"7126:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":619,"id":635,"nodeType":"Return","src":"7119:17:3"}]}}]},"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"6307:277:3","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":645,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"6598:26:3","nodeType":"FunctionDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"target","nameLocation":"6642:6:3","nodeType":"VariableDeclaration","scope":645,"src":"6634:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"6634:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"success","nameLocation":"6663:7:3","nodeType":"VariableDeclaration","scope":645,"src":"6658:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":610,"name":"bool","nodeType":"ElementaryTypeName","src":"6658:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":613,"mutability":"mutable","name":"returndata","nameLocation":"6693:10:3","nodeType":"VariableDeclaration","scope":645,"src":"6680:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":612,"name":"bytes","nodeType":"ElementaryTypeName","src":"6680:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":615,"mutability":"mutable","name":"errorMessage","nameLocation":"6727:12:3","nodeType":"VariableDeclaration","scope":645,"src":"6713:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":614,"name":"string","nodeType":"ElementaryTypeName","src":"6713:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6624:121:3"},"returnParameters":{"id":619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":618,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":645,"src":"6769:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":617,"name":"bytes","nodeType":"ElementaryTypeName","src":"6769:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6768:14:3"},"scope":690,"src":"6589:628:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":668,"nodeType":"Block","src":"7598:135:3","statements":[{"condition":{"id":657,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":648,"src":"7612:7:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":666,"nodeType":"Block","src":"7669:58:3","statements":[{"expression":{"arguments":[{"id":662,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"7691:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":663,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":652,"src":"7703:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":661,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":689,"src":"7683:7:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7683:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":665,"nodeType":"ExpressionStatement","src":"7683:33:3"}]},"id":667,"nodeType":"IfStatement","src":"7608:119:3","trueBody":{"id":660,"nodeType":"Block","src":"7621:42:3","statements":[{"expression":{"id":658,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"7642:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":656,"id":659,"nodeType":"Return","src":"7635:17:3"}]}}]},"documentation":{"id":646,"nodeType":"StructuredDocumentation","src":"7223:210:3","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":669,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"7447:16:3","nodeType":"FunctionDefinition","parameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"success","nameLocation":"7478:7:3","nodeType":"VariableDeclaration","scope":669,"src":"7473:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":647,"name":"bool","nodeType":"ElementaryTypeName","src":"7473:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":650,"mutability":"mutable","name":"returndata","nameLocation":"7508:10:3","nodeType":"VariableDeclaration","scope":669,"src":"7495:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":649,"name":"bytes","nodeType":"ElementaryTypeName","src":"7495:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":652,"mutability":"mutable","name":"errorMessage","nameLocation":"7542:12:3","nodeType":"VariableDeclaration","scope":669,"src":"7528:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":651,"name":"string","nodeType":"ElementaryTypeName","src":"7528:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7463:97:3"},"returnParameters":{"id":656,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":669,"src":"7584:12:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":654,"name":"bytes","nodeType":"ElementaryTypeName","src":"7584:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7583:14:3"},"scope":690,"src":"7438:295:3","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":688,"nodeType":"Block","src":"7822:457:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":676,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"7898:10:3","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"7898:17:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7918:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7898:21:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":686,"nodeType":"Block","src":"8228:45:3","statements":[{"expression":{"arguments":[{"id":683,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":673,"src":"8249:12:3","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":682,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"8242:6:3","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8242:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":685,"nodeType":"ExpressionStatement","src":"8242:20:3"}]},"id":687,"nodeType":"IfStatement","src":"7894:379:3","trueBody":{"id":681,"nodeType":"Block","src":"7921:301:3","statements":[{"AST":{"nodeType":"YulBlock","src":"8079:133:3","statements":[{"nodeType":"YulVariableDeclaration","src":"8097:40:3","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"8126:10:3"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8120:5:3"},"nodeType":"YulFunctionCall","src":"8120:17:3"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8101:15:3","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8165:2:3","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"8169:10:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8161:3:3"},"nodeType":"YulFunctionCall","src":"8161:19:3"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"8182:15:3"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8154:6:3"},"nodeType":"YulFunctionCall","src":"8154:44:3"},"nodeType":"YulExpressionStatement","src":"8154:44:3"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":671,"isOffset":false,"isSlot":false,"src":"8126:10:3","valueSize":1},{"declaration":671,"isOffset":false,"isSlot":false,"src":"8169:10:3","valueSize":1}],"id":680,"nodeType":"InlineAssembly","src":"8070:142:3"}]}}]},"id":689,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"7748:7:3","nodeType":"FunctionDefinition","parameters":{"id":674,"nodeType":"ParameterList","parameters":[{"constant":false,"id":671,"mutability":"mutable","name":"returndata","nameLocation":"7769:10:3","nodeType":"VariableDeclaration","scope":689,"src":"7756:23:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":670,"name":"bytes","nodeType":"ElementaryTypeName","src":"7756:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":673,"mutability":"mutable","name":"errorMessage","nameLocation":"7795:12:3","nodeType":"VariableDeclaration","scope":689,"src":"7781:26:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":672,"name":"string","nodeType":"ElementaryTypeName","src":"7781:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7755:53:3"},"returnParameters":{"id":675,"nodeType":"ParameterList","parameters":[],"src":"7822:0:3"},"scope":690,"src":"7739:540:3","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":691,"src":"194:8087:3","usedErrors":[]}],"src":"101:8181:3"},"id":3},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol","exportedSymbols":{"AddressUpgradeable":[690],"ContextUpgradeable":[732],"Initializable":[406]},"id":733,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":692,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:4"},{"absolutePath":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol","file":"../proxy/utils/Initializable.sol","id":693,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":733,"sourceUnit":407,"src":"110:42:4","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":695,"name":"Initializable","nodeType":"IdentifierPath","referencedDeclaration":406,"src":"691:13:4"},"id":696,"nodeType":"InheritanceSpecifier","src":"691:13:4"}],"canonicalName":"ContextUpgradeable","contractDependencies":[],"contractKind":"contract","documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"154:496:4","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":732,"linearizedBaseContracts":[732,406],"name":"ContextUpgradeable","nameLocation":"669:18:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":701,"nodeType":"Block","src":"763:7:4","statements":[]},"id":702,"implemented":true,"kind":"function","modifiers":[{"id":699,"kind":"modifierInvocation","modifierName":{"id":698,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":351,"src":"746:16:4"},"nodeType":"ModifierInvocation","src":"746:16:4"}],"name":"__Context_init","nameLocation":"720:14:4","nodeType":"FunctionDefinition","parameters":{"id":697,"nodeType":"ParameterList","parameters":[],"src":"734:2:4"},"returnParameters":{"id":700,"nodeType":"ParameterList","parameters":[],"src":"763:0:4"},"scope":732,"src":"711:59:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":707,"nodeType":"Block","src":"838:7:4","statements":[]},"id":708,"implemented":true,"kind":"function","modifiers":[{"id":705,"kind":"modifierInvocation","modifierName":{"id":704,"name":"onlyInitializing","nodeType":"IdentifierPath","referencedDeclaration":351,"src":"821:16:4"},"nodeType":"ModifierInvocation","src":"821:16:4"}],"name":"__Context_init_unchained","nameLocation":"785:24:4","nodeType":"FunctionDefinition","parameters":{"id":703,"nodeType":"ParameterList","parameters":[],"src":"809:2:4"},"returnParameters":{"id":706,"nodeType":"ParameterList","parameters":[],"src":"838:0:4"},"scope":732,"src":"776:69:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":716,"nodeType":"Block","src":"912:34:4","statements":[{"expression":{"expression":{"id":713,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"929:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"929:10:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":712,"id":715,"nodeType":"Return","src":"922:17:4"}]},"id":717,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"859:10:4","nodeType":"FunctionDefinition","parameters":{"id":709,"nodeType":"ParameterList","parameters":[],"src":"869:2:4"},"returnParameters":{"id":712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":717,"src":"903:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":710,"name":"address","nodeType":"ElementaryTypeName","src":"903:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"902:9:4"},"scope":732,"src":"850:96:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":725,"nodeType":"Block","src":"1019:32:4","statements":[{"expression":{"expression":{"id":722,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1036:3:4","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"data","nodeType":"MemberAccess","src":"1036:8:4","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":721,"id":724,"nodeType":"Return","src":"1029:15:4"}]},"id":726,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"961:8:4","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[],"src":"969:2:4"},"returnParameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":726,"src":"1003:14:4","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":719,"name":"bytes","nodeType":"ElementaryTypeName","src":"1003:5:4","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1002:16:4"},"scope":732,"src":"952:99:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"constant":false,"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"1057:254:4","text":" @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"},"id":731,"mutability":"mutable","name":"__gap","nameLocation":"1336:5:4","nodeType":"VariableDeclaration","scope":732,"src":"1316:25:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage","typeString":"uint256[50]"},"typeName":{"baseType":{"id":728,"name":"uint256","nodeType":"ElementaryTypeName","src":"1316:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":730,"length":{"hexValue":"3530","id":729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1324:2:4","typeDescriptions":{"typeIdentifier":"t_rational_50_by_1","typeString":"int_const 50"},"value":"50"},"nodeType":"ArrayTypeName","src":"1316:11:4","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$50_storage_ptr","typeString":"uint256[50]"}},"visibility":"private"}],"scope":733,"src":"651:693:4","usedErrors":[]}],"src":"86:1259:4"},"id":4},"contracts/DcPayChannel.sol":{"ast":{"absolutePath":"contracts/DcPayChannel.sol","exportedSymbols":{"AddressUpgradeable":[690],"ContextUpgradeable":[732],"DcPayChannel":[1046],"Initializable":[406],"Ownable2StepUpgradeable":[105],"OwnableUpgradeable":[237]},"id":1047,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":734,"literals":["solidity","^","0.8",".9"],"nodeType":"PragmaDirective","src":"32:23:5"},{"absolutePath":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","file":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol","id":735,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1047,"sourceUnit":106,"src":"57:80:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":736,"name":"Ownable2StepUpgradeable","nodeType":"IdentifierPath","referencedDeclaration":105,"src":"164:23:5"},"id":737,"nodeType":"InheritanceSpecifier","src":"164:23:5"}],"canonicalName":"DcPayChannel","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1046,"linearizedBaseContracts":[1046,105,237,732,406],"name":"DcPayChannel","nameLocation":"148:12:5","nodeType":"ContractDefinition","nodes":[{"canonicalName":"DcPayChannel.Stake","id":746,"members":[{"constant":false,"id":739,"mutability":"mutable","name":"amount","nameLocation":"253:6:5","nodeType":"VariableDeclaration","scope":746,"src":"245:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"245:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"startTime","nameLocation":"301:9:5","nodeType":"VariableDeclaration","scope":746,"src":"293:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":740,"name":"uint256","nodeType":"ElementaryTypeName","src":"293:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":743,"mutability":"mutable","name":"lockTime","nameLocation":"352:8:5","nodeType":"VariableDeclaration","scope":746,"src":"344:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":742,"name":"uint256","nodeType":"ElementaryTypeName","src":"344:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":745,"mutability":"mutable","name":"active","nameLocation":"410:6:5","nodeType":"VariableDeclaration","scope":746,"src":"405:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":744,"name":"bool","nodeType":"ElementaryTypeName","src":"405:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Stake","nameLocation":"229:5:5","nodeType":"StructDefinition","scope":1046,"src":"222:231:5","visibility":"public"},{"canonicalName":"DcPayChannel.StakeInfo","id":757,"members":[{"constant":false,"id":748,"mutability":"mutable","name":"stakeId","nameLocation":"562:7:5","nodeType":"VariableDeclaration","scope":757,"src":"554:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":747,"name":"uint256","nodeType":"ElementaryTypeName","src":"554:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"amount","nameLocation":"603:6:5","nodeType":"VariableDeclaration","scope":757,"src":"595:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":749,"name":"uint256","nodeType":"ElementaryTypeName","src":"595:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":752,"mutability":"mutable","name":"startTime","nameLocation":"651:9:5","nodeType":"VariableDeclaration","scope":757,"src":"643:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":751,"name":"uint256","nodeType":"ElementaryTypeName","src":"643:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":754,"mutability":"mutable","name":"lockTime","nameLocation":"702:8:5","nodeType":"VariableDeclaration","scope":757,"src":"694:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":753,"name":"uint256","nodeType":"ElementaryTypeName","src":"694:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"active","nameLocation":"744:6:5","nodeType":"VariableDeclaration","scope":757,"src":"739:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":755,"name":"bool","nodeType":"ElementaryTypeName","src":"739:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"StakeInfo","nameLocation":"534:9:5","nodeType":"StructDefinition","scope":1046,"src":"527:260:5","visibility":"public"},{"constant":false,"functionSelector":"584b62a1","id":763,"mutability":"mutable","name":"stakes","nameLocation":"890:6:5","nodeType":"VariableDeclaration","scope":1046,"src":"855:41:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake[])"},"typeName":{"id":762,"keyType":{"id":758,"name":"address","nodeType":"ElementaryTypeName","src":"863:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"855:27:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake[])"},"valueType":{"baseType":{"id":760,"nodeType":"UserDefinedTypeName","pathNode":{"id":759,"name":"Stake","nodeType":"IdentifierPath","referencedDeclaration":746,"src":"874:5:5"},"referencedDeclaration":746,"src":"874:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake"}},"id":761,"nodeType":"ArrayTypeName","src":"874:7:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage_ptr","typeString":"struct DcPayChannel.Stake[]"}}},"visibility":"public"},{"constant":true,"functionSelector":"d1d7e10a","id":766,"mutability":"constant","name":"FIL_PER_10T","nameLocation":"1005:11:5","nodeType":"VariableDeclaration","scope":1046,"src":"981:45:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"981:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1019:7:5","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"bb224d6e","id":771,"mutability":"constant","name":"MAX_DC","nameLocation":"1078:6:5","nodeType":"VariableDeclaration","scope":1046,"src":"1054:41:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":767,"name":"uint256","nodeType":"ElementaryTypeName","src":"1054:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_2048_by_1","typeString":"int_const 2048"},"id":770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1087:1:5","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"31303234","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1091:4:5","typeDescriptions":{"typeIdentifier":"t_rational_1024_by_1","typeString":"int_const 1024"},"value":"1024"},"src":"1087:8:5","typeDescriptions":{"typeIdentifier":"t_rational_2048_by_1","typeString":"int_const 2048"}},"visibility":"public"},{"constant":true,"functionSelector":"f158adf2","id":774,"mutability":"constant","name":"LOCK_TIME_20_DAYS","nameLocation":"1168:17:5","nodeType":"VariableDeclaration","scope":1046,"src":"1144:51:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"1144:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3230","id":773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1188:7:5","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_1728000_by_1","typeString":"int_const 1728000"},"value":"20"},"visibility":"public"},{"constant":true,"functionSelector":"61cbfa50","id":777,"mutability":"constant","name":"LOCK_TIME_40_DAYS","nameLocation":"1225:17:5","nodeType":"VariableDeclaration","scope":1046,"src":"1201:51:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":775,"name":"uint256","nodeType":"ElementaryTypeName","src":"1201:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3430","id":776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1245:7:5","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_3456000_by_1","typeString":"int_const 3456000"},"value":"40"},"visibility":"public"},{"anonymous":false,"id":787,"name":"Staked","nameLocation":"1265:6:5","nodeType":"EventDefinition","parameters":{"id":786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":779,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1288:4:5","nodeType":"VariableDeclaration","scope":787,"src":"1272:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":778,"name":"address","nodeType":"ElementaryTypeName","src":"1272:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":781,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1302:6:5","nodeType":"VariableDeclaration","scope":787,"src":"1294:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":780,"name":"uint256","nodeType":"ElementaryTypeName","src":"1294:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":783,"indexed":false,"mutability":"mutable","name":"lockTime","nameLocation":"1318:8:5","nodeType":"VariableDeclaration","scope":787,"src":"1310:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":782,"name":"uint256","nodeType":"ElementaryTypeName","src":"1310:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":785,"indexed":false,"mutability":"mutable","name":"stakeId","nameLocation":"1336:7:5","nodeType":"VariableDeclaration","scope":787,"src":"1328:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":784,"name":"uint256","nodeType":"ElementaryTypeName","src":"1328:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1271:73:5"},"src":"1259:86:5"},{"anonymous":false,"id":795,"name":"Unstaked","nameLocation":"1356:8:5","nodeType":"EventDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":789,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1381:4:5","nodeType":"VariableDeclaration","scope":795,"src":"1365:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":788,"name":"address","nodeType":"ElementaryTypeName","src":"1365:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":791,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1395:6:5","nodeType":"VariableDeclaration","scope":795,"src":"1387:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"1387:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":793,"indexed":false,"mutability":"mutable","name":"stakeId","nameLocation":"1411:7:5","nodeType":"VariableDeclaration","scope":795,"src":"1403:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":792,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1364:55:5"},"src":"1350:70:5"},{"body":{"id":881,"nodeType":"Block","src":"1515:841:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":803,"name":"stakeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"1533:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1546:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1533:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":806,"name":"stakeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"1551:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1564:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1551:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1533:32:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207374616b652074797065","id":810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1567:20:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_f80ffa7094ca2e8a8c945ed590b9c49e91129095b7638a547251e702d46b801a","typeString":"literal_string \"Invalid stake type\""},"value":"Invalid stake type"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f80ffa7094ca2e8a8c945ed590b9c49e91129095b7638a547251e702d46b801a","typeString":"literal_string \"Invalid stake type\""}],"id":802,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1525:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1525:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":812,"nodeType":"ExpressionStatement","src":"1525:63:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":814,"name":"dcAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"1606:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":815,"name":"MAX_DC","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"1618:6:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1606:18:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45786365656473206d6178204443","id":817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1626:16:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_a7af10a533e9d43872af748e13918bba08c14c708cbf9f2d974ba55f2d87022b","typeString":"literal_string \"Exceeds max DC\""},"value":"Exceeds max DC"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a7af10a533e9d43872af748e13918bba08c14c708cbf9f2d974ba55f2d87022b","typeString":"literal_string \"Exceeds max DC\""}],"id":813,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1598:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1598:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":819,"nodeType":"ExpressionStatement","src":"1598:45:5"},{"assignments":[821],"declarations":[{"constant":false,"id":821,"mutability":"mutable","name":"lockTime","nameLocation":"1710:8:5","nodeType":"VariableDeclaration","scope":881,"src":"1702:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":820,"name":"uint256","nodeType":"ElementaryTypeName","src":"1702:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":829,"initialValue":{"condition":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":822,"name":"stakeType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"1722:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1735:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1722:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":825,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1721:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":827,"name":"LOCK_TIME_40_DAYS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"1760:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1721:56:5","trueExpression":{"id":826,"name":"LOCK_TIME_20_DAYS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"1740:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1702:75:5"},{"assignments":[831],"declarations":[{"constant":false,"id":831,"mutability":"mutable","name":"requiredFil","nameLocation":"1835:11:5","nodeType":"VariableDeclaration","scope":881,"src":"1827:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":830,"name":"uint256","nodeType":"ElementaryTypeName","src":"1827:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":838,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":832,"name":"dcAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"1850:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"3130","id":833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1861:2:5","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1850:13:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":835,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1849:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":836,"name":"FIL_PER_10T","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"1867:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1849:29:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1827:51:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":840,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1896:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"1896:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":842,"name":"requiredFil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":831,"src":"1909:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1896:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e742046494c20666f72207374616b696e67","id":844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1922:30:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_67db24fb96157ffc95690acaffa6f80b67fb8b33c2e6e2423b24a66e659d1111","typeString":"literal_string \"Insufficient FIL for staking\""},"value":"Insufficient FIL for staking"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_67db24fb96157ffc95690acaffa6f80b67fb8b33c2e6e2423b24a66e659d1111","typeString":"literal_string \"Insufficient FIL for staking\""}],"id":839,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1888:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1888:65:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":846,"nodeType":"ExpressionStatement","src":"1888:65:5"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":853,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2079:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2079:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":855,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2113:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2113:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":857,"name":"lockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2152:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2182:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":852,"name":"Stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":746,"src":"2051:5:5","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Stake_$746_storage_ptr_$","typeString":"type(struct DcPayChannel.Stake storage pointer)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["amount","startTime","lockTime","active"],"nodeType":"FunctionCall","src":"2051:146:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_memory_ptr","typeString":"struct DcPayChannel.Stake memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Stake_$746_memory_ptr","typeString":"struct DcPayChannel.Stake memory"}],"expression":{"baseExpression":{"id":847,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"2027:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake storage ref[] storage ref)"}},"id":850,"indexExpression":{"expression":{"id":848,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2034:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2034:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2027:18:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage","typeString":"struct DcPayChannel.Stake storage ref[] storage ref"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2027:23:5","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_ptr_$_t_struct$_Stake_$746_storage_$returns$__$bound_to$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_ptr_$","typeString":"function (struct DcPayChannel.Stake storage ref[] storage pointer,struct DcPayChannel.Stake storage ref)"}},"id":860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2027:171:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":861,"nodeType":"ExpressionStatement","src":"2027:171:5"},{"assignments":[863],"declarations":[{"constant":false,"id":863,"mutability":"mutable","name":"stakeId","nameLocation":"2246:7:5","nodeType":"VariableDeclaration","scope":881,"src":"2238:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":862,"name":"uint256","nodeType":"ElementaryTypeName","src":"2238:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":871,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":864,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"2256:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake storage ref[] storage ref)"}},"id":867,"indexExpression":{"expression":{"id":865,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2263:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2263:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2256:18:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage","typeString":"struct DcPayChannel.Stake storage ref[] storage ref"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2256:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2284:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2256:29:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2238:47:5"},{"eventCall":{"arguments":[{"expression":{"id":873,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2308:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2308:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":875,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2320:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"2320:9:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":877,"name":"lockTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"2331:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":878,"name":"stakeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"2341:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":872,"name":"Staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"2301:6:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2301:48:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"EmitStatement","src":"2296:53:5"}]},"functionSelector":"7b0472f0","id":882,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"1455:5:5","nodeType":"FunctionDefinition","parameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":797,"mutability":"mutable","name":"dcAmount","nameLocation":"1469:8:5","nodeType":"VariableDeclaration","scope":882,"src":"1461:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"1461:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":799,"mutability":"mutable","name":"stakeType","nameLocation":"1487:9:5","nodeType":"VariableDeclaration","scope":882,"src":"1479:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"1479:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1460:37:5"},"returnParameters":{"id":801,"nodeType":"ParameterList","parameters":[],"src":"1515:0:5"},"scope":1046,"src":"1446:910:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":959,"nodeType":"Block","src":"2453:636:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":888,"name":"stakeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"2471:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":889,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"2481:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake storage ref[] storage ref)"}},"id":892,"indexExpression":{"expression":{"id":890,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2488:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2488:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2481:18:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage","typeString":"struct DcPayChannel.Stake storage ref[] storage ref"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2481:25:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2471:35:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207374616b654964","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2508:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_93e52c649e5842b2507b13bc5680aa82df97b3d2e98fe279daf650cfaa29eb2e","typeString":"literal_string \"Invalid stakeId\""},"value":"Invalid stakeId"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_93e52c649e5842b2507b13bc5680aa82df97b3d2e98fe279daf650cfaa29eb2e","typeString":"literal_string \"Invalid stakeId\""}],"id":887,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2463:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2463:63:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":897,"nodeType":"ExpressionStatement","src":"2463:63:5"},{"assignments":[900],"declarations":[{"constant":false,"id":900,"mutability":"mutable","name":"userStake","nameLocation":"2551:9:5","nodeType":"VariableDeclaration","scope":959,"src":"2537:23:5","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake"},"typeName":{"id":899,"nodeType":"UserDefinedTypeName","pathNode":{"id":898,"name":"Stake","nodeType":"IdentifierPath","referencedDeclaration":746,"src":"2537:5:5"},"referencedDeclaration":746,"src":"2537:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake"}},"visibility":"internal"}],"id":907,"initialValue":{"baseExpression":{"baseExpression":{"id":901,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"2563:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake storage ref[] storage ref)"}},"id":904,"indexExpression":{"expression":{"id":902,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2570:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2570:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2563:18:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage","typeString":"struct DcPayChannel.Stake storage ref[] storage ref"}},"id":906,"indexExpression":{"id":905,"name":"stakeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"2582:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2563:27:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage","typeString":"struct DcPayChannel.Stake storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2537:53:5"},{"expression":{"arguments":[{"expression":{"id":909,"name":"userStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2608:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake storage pointer"}},"id":910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":745,"src":"2608:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5374616b6520697320616c726561647920756e6c6f636b6564","id":911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:27:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_577f9f22832ad519676df27ccdc6b9b586d9c52964b0a484f095709114b4ba37","typeString":"literal_string \"Stake is already unlocked\""},"value":"Stake is already unlocked"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_577f9f22832ad519676df27ccdc6b9b586d9c52964b0a484f095709114b4ba37","typeString":"literal_string \"Stake is already unlocked\""}],"id":908,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2600:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2600:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":913,"nodeType":"ExpressionStatement","src":"2600:54:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":915,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2672:5:5","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"2672:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":917,"name":"userStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2691:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake storage pointer"}},"id":918,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":741,"src":"2691:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":919,"name":"userStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2713:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake storage pointer"}},"id":920,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lockTime","nodeType":"MemberAccess","referencedDeclaration":743,"src":"2713:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2691:40:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2672:59:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5374616b65206973207374696c6c206c6f636b6564","id":923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2733:23:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_70a4a744132fc9399c082f0c459154fe3f5ba22b57af6b69242ec317d0c935a9","typeString":"literal_string \"Stake is still locked\""},"value":"Stake is still locked"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_70a4a744132fc9399c082f0c459154fe3f5ba22b57af6b69242ec317d0c935a9","typeString":"literal_string \"Stake is still locked\""}],"id":914,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2664:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2664:93:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":925,"nodeType":"ExpressionStatement","src":"2664:93:5"},{"assignments":[927],"declarations":[{"constant":false,"id":927,"mutability":"mutable","name":"amountToReturn","nameLocation":"2776:14:5","nodeType":"VariableDeclaration","scope":959,"src":"2768:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":926,"name":"uint256","nodeType":"ElementaryTypeName","src":"2768:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":930,"initialValue":{"expression":{"id":928,"name":"userStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2793:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake storage pointer"}},"id":929,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":739,"src":"2793:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2768:41:5"},{"expression":{"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":931,"name":"userStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2819:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake storage pointer"}},"id":933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":745,"src":"2819:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2838:5:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2819:24:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":936,"nodeType":"ExpressionStatement","src":"2819:24:5"},{"assignments":[938,null],"declarations":[{"constant":false,"id":938,"mutability":"mutable","name":"success","nameLocation":"2921:7:5","nodeType":"VariableDeclaration","scope":959,"src":"2916:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":937,"name":"bool","nodeType":"ElementaryTypeName","src":"2916:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":946,"initialValue":{"arguments":[{"hexValue":"","id":944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2973:2:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"expression":{"id":939,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2934:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2934:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"2934:15:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":942,"name":"amountToReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"2957:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2934:38:5","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2934:42:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2915:61:5"},{"expression":{"arguments":[{"id":948,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"2994:7:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5472616e73666572206661696c6564","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3003:17:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""},"value":"Transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51","typeString":"literal_string \"Transfer failed\""}],"id":947,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2986:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2986:35:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":951,"nodeType":"ExpressionStatement","src":"2986:35:5"},{"eventCall":{"arguments":[{"expression":{"id":953,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3046:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"3046:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":955,"name":"amountToReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":927,"src":"3058:14:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":956,"name":"stakeId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":884,"src":"3074:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":952,"name":"Unstaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"3037:8:5","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3037:45:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":958,"nodeType":"EmitStatement","src":"3032:50:5"}]},"functionSelector":"6198e339","id":960,"implemented":true,"kind":"function","modifiers":[],"name":"unlock","nameLocation":"2420:6:5","nodeType":"FunctionDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"stakeId","nameLocation":"2435:7:5","nodeType":"VariableDeclaration","scope":960,"src":"2427:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"2427:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2426:17:5"},"returnParameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"2453:0:5"},"scope":1046,"src":"2411:678:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":963,"nodeType":"Block","src":"3157:2:5","statements":[]},"id":964,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":961,"nodeType":"ParameterList","parameters":[],"src":"3137:2:5"},"returnParameters":{"id":962,"nodeType":"ParameterList","parameters":[],"src":"3157:0:5"},"scope":1046,"src":"3130:29:5","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":1031,"nodeType":"Block","src":"3348:565:5","statements":[{"assignments":[974],"declarations":[{"constant":false,"id":974,"mutability":"mutable","name":"stakeCount","nameLocation":"3366:10:5","nodeType":"VariableDeclaration","scope":1031,"src":"3358:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":973,"name":"uint256","nodeType":"ElementaryTypeName","src":"3358:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":979,"initialValue":{"expression":{"baseExpression":{"id":975,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"3379:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake storage ref[] storage ref)"}},"id":977,"indexExpression":{"id":976,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"3386:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3379:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage","typeString":"struct DcPayChannel.Stake storage ref[] storage ref"}},"id":978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3379:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3358:40:5"},{"assignments":[984],"declarations":[{"constant":false,"id":984,"mutability":"mutable","name":"allStakeInfo","nameLocation":"3427:12:5","nodeType":"VariableDeclaration","scope":1031,"src":"3408:31:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr","typeString":"struct DcPayChannel.StakeInfo[]"},"typeName":{"baseType":{"id":982,"nodeType":"UserDefinedTypeName","pathNode":{"id":981,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":757,"src":"3408:9:5"},"referencedDeclaration":757,"src":"3408:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$757_storage_ptr","typeString":"struct DcPayChannel.StakeInfo"}},"id":983,"nodeType":"ArrayTypeName","src":"3408:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_storage_$dyn_storage_ptr","typeString":"struct DcPayChannel.StakeInfo[]"}},"visibility":"internal"}],"id":991,"initialValue":{"arguments":[{"id":989,"name":"stakeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"3458:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3442:15:5","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct DcPayChannel.StakeInfo memory[] memory)"},"typeName":{"baseType":{"id":986,"nodeType":"UserDefinedTypeName","pathNode":{"id":985,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":757,"src":"3446:9:5"},"referencedDeclaration":757,"src":"3446:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$757_storage_ptr","typeString":"struct DcPayChannel.StakeInfo"}},"id":987,"nodeType":"ArrayTypeName","src":"3446:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_storage_$dyn_storage_ptr","typeString":"struct DcPayChannel.StakeInfo[]"}}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3442:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr","typeString":"struct DcPayChannel.StakeInfo memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"3408:61:5"},{"body":{"id":1027,"nodeType":"Block","src":"3549:328:5","statements":[{"assignments":[1004],"declarations":[{"constant":false,"id":1004,"mutability":"mutable","name":"stakeInfo","nameLocation":"3576:9:5","nodeType":"VariableDeclaration","scope":1027,"src":"3563:22:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_memory_ptr","typeString":"struct DcPayChannel.Stake"},"typeName":{"id":1003,"nodeType":"UserDefinedTypeName","pathNode":{"id":1002,"name":"Stake","nodeType":"IdentifierPath","referencedDeclaration":746,"src":"3563:5:5"},"referencedDeclaration":746,"src":"3563:5:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage_ptr","typeString":"struct DcPayChannel.Stake"}},"visibility":"internal"}],"id":1010,"initialValue":{"baseExpression":{"baseExpression":{"id":1005,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"3588:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake storage ref[] storage ref)"}},"id":1007,"indexExpression":{"id":1006,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":966,"src":"3595:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3588:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage","typeString":"struct DcPayChannel.Stake storage ref[] storage ref"}},"id":1009,"indexExpression":{"id":1008,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"3601:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3588:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_storage","typeString":"struct DcPayChannel.Stake storage ref"}},"nodeType":"VariableDeclarationStatement","src":"3563:40:5"},{"expression":{"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1011,"name":"allStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"3617:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr","typeString":"struct DcPayChannel.StakeInfo memory[] memory"}},"id":1013,"indexExpression":{"id":1012,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"3630:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3617:15:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$757_memory_ptr","typeString":"struct DcPayChannel.StakeInfo memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1015,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"3672:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1016,"name":"stakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"3699:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_memory_ptr","typeString":"struct DcPayChannel.Stake memory"}},"id":1017,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":739,"src":"3699:16:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1018,"name":"stakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"3744:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_memory_ptr","typeString":"struct DcPayChannel.Stake memory"}},"id":1019,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":741,"src":"3744:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1020,"name":"stakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"3791:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_memory_ptr","typeString":"struct DcPayChannel.Stake memory"}},"id":1021,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"lockTime","nodeType":"MemberAccess","referencedDeclaration":743,"src":"3791:18:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1022,"name":"stakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"3835:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_Stake_$746_memory_ptr","typeString":"struct DcPayChannel.Stake memory"}},"id":1023,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberName":"active","nodeType":"MemberAccess","referencedDeclaration":745,"src":"3835:16:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1014,"name":"StakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"3635:9:5","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StakeInfo_$757_storage_ptr_$","typeString":"type(struct DcPayChannel.StakeInfo storage pointer)"}},"id":1024,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["stakeId","amount","startTime","lockTime","active"],"nodeType":"FunctionCall","src":"3635:231:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$757_memory_ptr","typeString":"struct DcPayChannel.StakeInfo memory"}},"src":"3617:249:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$757_memory_ptr","typeString":"struct DcPayChannel.StakeInfo memory"}},"id":1026,"nodeType":"ExpressionStatement","src":"3617:249:5"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":996,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"3528:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":997,"name":"stakeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"3532:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3528:14:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1028,"initializationExpression":{"assignments":[993],"declarations":[{"constant":false,"id":993,"mutability":"mutable","name":"i","nameLocation":"3521:1:5","nodeType":"VariableDeclaration","scope":1028,"src":"3513:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":992,"name":"uint256","nodeType":"ElementaryTypeName","src":"3513:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":995,"initialValue":{"hexValue":"30","id":994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3525:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3513:13:5"},"loopExpression":{"expression":{"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3544:3:5","subExpression":{"id":999,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"3544:1:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1001,"nodeType":"ExpressionStatement","src":"3544:3:5"},"nodeType":"ForStatement","src":"3508:369:5"},{"expression":{"id":1029,"name":"allStakeInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":984,"src":"3894:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr","typeString":"struct DcPayChannel.StakeInfo memory[] memory"}},"functionReturnParameters":972,"id":1030,"nodeType":"Return","src":"3887:19:5"}]},"functionSelector":"559566b9","id":1032,"implemented":true,"kind":"function","modifiers":[],"name":"getAllStakeInfo","nameLocation":"3275:15:5","nodeType":"FunctionDefinition","parameters":{"id":967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":966,"mutability":"mutable","name":"user","nameLocation":"3299:4:5","nodeType":"VariableDeclaration","scope":1032,"src":"3291:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":965,"name":"address","nodeType":"ElementaryTypeName","src":"3291:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3290:14:5"},"returnParameters":{"id":972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":971,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1032,"src":"3328:18:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr","typeString":"struct DcPayChannel.StakeInfo[]"},"typeName":{"baseType":{"id":969,"nodeType":"UserDefinedTypeName","pathNode":{"id":968,"name":"StakeInfo","nodeType":"IdentifierPath","referencedDeclaration":757,"src":"3328:9:5"},"referencedDeclaration":757,"src":"3328:9:5","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$757_storage_ptr","typeString":"struct DcPayChannel.StakeInfo"}},"id":970,"nodeType":"ArrayTypeName","src":"3328:11:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_StakeInfo_$757_storage_$dyn_storage_ptr","typeString":"struct DcPayChannel.StakeInfo[]"}},"visibility":"internal"}],"src":"3327:20:5"},"scope":1046,"src":"3266:647:5","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1044,"nodeType":"Block","src":"4029:43:5","statements":[{"expression":{"expression":{"baseExpression":{"id":1039,"name":"stakes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"4046:6:5","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Stake_$746_storage_$dyn_storage_$","typeString":"mapping(address => struct DcPayChannel.Stake storage ref[] storage ref)"}},"id":1041,"indexExpression":{"id":1040,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"4053:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4046:12:5","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Stake_$746_storage_$dyn_storage","typeString":"struct DcPayChannel.Stake storage ref[] storage ref"}},"id":1042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4046:19:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1038,"id":1043,"nodeType":"Return","src":"4039:26:5"}]},"functionSelector":"cf57ee69","id":1045,"implemented":true,"kind":"function","modifiers":[],"name":"getStakeCount","nameLocation":"3969:13:5","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"user","nameLocation":"3991:4:5","nodeType":"VariableDeclaration","scope":1045,"src":"3983:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"3983:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3982:14:5"},"returnParameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1045,"src":"4020:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1036,"name":"uint256","nodeType":"ElementaryTypeName","src":"4020:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4019:9:5"},"scope":1046,"src":"3960:112:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1047,"src":"139:3935:5","usedErrors":[]}],"src":"32:4042:5"},"id":5}},"contracts":{"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol":{"Ownable2StepUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).","kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptOwnership()":"79ba5097","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership} and {acceptOwnership}. This module is used through inheritance. It will make available all functions from parent (Ownable).\",\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":\"Ownable2StepUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":244,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":247,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":731,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":25,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":104,"contract":"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol:Ownable2StepUpgradeable","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol":{"OwnableUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":244,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":247,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":731,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol":{"Initializable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":244,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":247,"contract":"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol":{"AddressUpgradeable":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b3447d3d389bb05a2548fdd91ed29292c48f2efdf3c3e55b5e36ec4206928c7864736f6c63430008090033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 DIFFICULTY PUSH30 0x3D389BB05A2548FDD91ED29292C48F2EFDF3C3E55B5E36EC4206928C7864 PUSH20 0x6F6C634300080900330000000000000000000000 ","sourceMap":"194:8087:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8087:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b3447d3d389bb05a2548fdd91ed29292c48f2efdf3c3e55b5e36ec4206928c7864736f6c63430008090033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 DIFFICULTY PUSH30 0x3D389BB05A2548FDD91ED29292C48F2EFDF3C3E55B5E36EC4206928C7864 PUSH20 0x6F6C634300080900330000000000000000000000 ","sourceMap":"194:8087:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol":{"ContextUpgradeable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":244,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":247,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":731,"contract":"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"}],"types":{"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/DcPayChannel.sol":{"DcPayChannel":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"lockTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakeId","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"stakeId","type":"uint256"}],"name":"Unstaked","type":"event"},{"inputs":[],"name":"FIL_PER_10T","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LOCK_TIME_20_DAYS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LOCK_TIME_40_DAYS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getAllStakeInfo","outputs":[{"components":[{"internalType":"uint256","name":"stakeId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"lockTime","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"internalType":"struct DcPayChannel.StakeInfo[]","name":"","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getStakeCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"dcAmount","type":"uint256"},{"internalType":"uint256","name":"stakeType","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"stakes","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"lockTime","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stakeId","type":"uint256"}],"name":"unlock","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50610c8a806100206000396000f3fe6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063d1d7e10a11610059578063d1d7e10a14610267578063e30c397814610283578063f158adf2146102a1578063f2fde38b146102b857600080fd5b80638da5cb5b146101e9578063bb224d6e1461021b578063cf57ee691461023157600080fd5b806361cbfa50116100bb57806361cbfa5014610187578063715018a6146101ac57806379ba5097146101c15780637b0472f0146101d657600080fd5b8063559566b9146100ed578063584b62a1146101235780636198e3391461016557600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610a90565b6102d8565b60405161011a9190610ab2565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004610b22565b610470565b604080519485526020850193909352918301521515606082015260800161011a565b34801561017157600080fd5b50610185610180366004610b4c565b6104b9565b005b34801561019357600080fd5b5061019e6234bc0081565b60405190815260200161011a565b3480156101b857600080fd5b506101856106ca565b3480156101cd57600080fd5b506101856106de565b6101856101e4366004610b65565b610758565b3480156101f557600080fd5b506033546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b34801561022757600080fd5b5061019e61080081565b34801561023d57600080fd5b5061019e61024c366004610a90565b6001600160a01b031660009081526097602052604090205490565b34801561027357600080fd5b5061019e670de0b6b3a764000081565b34801561028f57600080fd5b506065546001600160a01b0316610203565b3480156102ad57600080fd5b5061019e621a5e0081565b3480156102c457600080fd5b506101856102d3366004610a90565b610943565b6001600160a01b0381166000908152609760205260408120546060918167ffffffffffffffff81111561030d5761030d610b87565b60405190808252806020026020018201604052801561037257816020015b61035f6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b81526020019060019003908161032b5790505b50905060005b82811015610468576001600160a01b03851660009081526097602052604081208054839081106103aa576103aa610b9d565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506040518060a001604052808381526020018260000151815260200182602001518152602001826040015181526020018260600151151581525083838151811061044957610449610b9d565b602002602001018190525050808061046090610bc9565b915050610378565b509392505050565b6097602052816000526040600020818154811061048c57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919450925060ff1684565b33600090815260976020526040902054811061050e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cdd185ad95259608a1b60448201526064015b60405180910390fd5b33600090815260976020526040812080548390811061052f5761052f610b9d565b60009182526020909120600490910201600381015490915060ff166105965760405162461bcd60e51b815260206004820152601960248201527f5374616b6520697320616c726561647920756e6c6f636b6564000000000000006044820152606401610505565b806002015481600101546105aa9190610be4565b4210156105f15760405162461bcd60e51b815260206004820152601560248201527414dd185ad9481a5cc81cdd1a5b1b081b1bd8dad959605a1b6044820152606401610505565b805460038201805460ff19169055604051600090339083908381818185875af1925050503d8060008114610641576040519150601f19603f3d011682016040523d82523d6000602084013e610646565b606091505b50509050806106895760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610505565b604080518381526020810186905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a250505050565b6106d26109b4565b6106dc6000610a0e565b565b60655433906001600160a01b0316811461074c5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610505565b61075581610a0e565b50565b8015806107655750806001145b6107a65760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207374616b65207479706560701b6044820152606401610505565b6108008211156107e95760405162461bcd60e51b815260206004820152600e60248201526d45786365656473206d617820444360901b6044820152606401610505565b600081156107fa576234bc006107ff565b621a5e005b90506000670de0b6b3a7640000610817600a86610bfc565b6108219190610c1e565b9050803410156108735760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046494c20666f72207374616b696e67000000006044820152606401610505565b33600081815260976020818152604080842081516080810183523481524281850190815292810189815260016060830181815284548083018655858a52878a20945160049091029094019384559451838201559051600283015592516003909101805460ff1916911515919091179055948452919052915490916108f691610c3d565b604080513481526020810186905290810182905290915033907fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed9060600160405180910390a25050505050565b61094b6109b4565b606580546001600160a01b0383166001600160a01b0319909116811790915561097c6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146106dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610505565b606580546001600160a01b031916905561075581603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b0381168114610a8b57600080fd5b919050565b600060208284031215610aa257600080fd5b610aab82610a74565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610b1557815180518552868101518786015285810151868601526060808201519086015260809081015115159085015260a09093019290850190600101610acf565b5091979650505050505050565b60008060408385031215610b3557600080fd5b610b3e83610a74565b946020939093013593505050565b600060208284031215610b5e57600080fd5b5035919050565b60008060408385031215610b7857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610bdd57610bdd610bb3565b5060010190565b60008219821115610bf757610bf7610bb3565b500190565b600082610c1957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c3857610c38610bb3565b500290565b600082821015610c4f57610c4f610bb3565b50039056fea2646970667358221220dc0366237ce805ea1486026a151169494b3e32655f4a5e25d283917fd8b07e2664736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC8A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xD1D7E10A GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD1D7E10A EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xF158ADF2 EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xBB224D6E EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0xCF57EE69 EQ PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61CBFA50 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x61CBFA50 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x559566B9 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x584B62A1 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x6198E339 EQ PUSH2 0x165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xE8 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 PUSH2 0x13E CALLDATASIZE PUSH1 0x4 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x11A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xB4C JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH3 0x34BC00 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x6CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x185 PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xB65 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH2 0x800 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x203 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH3 0x1A5E00 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x943 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x60 SWAP2 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30D JUMPI PUSH2 0x30D PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x372 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x35F PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x32B JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x468 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x3AA JUMPI PUSH2 0x3AA PUSH2 0xB9D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x60 ADD MLOAD ISZERO ISZERO DUP2 MSTORE POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x449 JUMPI PUSH2 0x449 PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP DUP1 DUP1 PUSH2 0x460 SWAP1 PUSH2 0xBC9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x378 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x97 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0xFF AND DUP5 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x125B9D985B1A59081CDD185AD95259 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x52F JUMPI PUSH2 0x52F PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x3 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B6520697320616C726561647920756E6C6F636B656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST DUP1 PUSH1 0x2 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD PUSH2 0x5AA SWAP2 SWAP1 PUSH2 0xBE4 JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x14DD185AD9481A5CC81CDD1A5B1B081B1BD8DAD959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x641 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x646 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x7FC4727E062E336010F2C282598EF5F14FACB3DE68CF8195C2F23E1454B2B74E SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x6D2 PUSH2 0x9B4 JUMP JUMPDEST PUSH2 0x6DC PUSH1 0x0 PUSH2 0xA0E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH2 0x755 DUP2 PUSH2 0xA0E JUMP JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x765 JUMPI POP DUP1 PUSH1 0x1 EQ JUMPDEST PUSH2 0x7A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E76616C6964207374616B652074797065 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH2 0x800 DUP3 GT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x45786365656473206D6178204443 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x7FA JUMPI PUSH3 0x34BC00 PUSH2 0x7FF JUMP JUMPDEST PUSH3 0x1A5E00 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x817 PUSH1 0xA DUP7 PUSH2 0xBFC JUMP JUMPDEST PUSH2 0x821 SWAP2 SWAP1 PUSH2 0xC1E JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0x873 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742046494C20666F72207374616B696E6700000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE CALLVALUE DUP2 MSTORE TIMESTAMP DUP2 DUP6 ADD SWAP1 DUP2 MSTORE SWAP3 DUP2 ADD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x60 DUP4 ADD DUP2 DUP2 MSTORE DUP5 SLOAD DUP1 DUP4 ADD DUP7 SSTORE DUP6 DUP11 MSTORE DUP8 DUP11 KECCAK256 SWAP5 MLOAD PUSH1 0x4 SWAP1 SWAP2 MUL SWAP1 SWAP5 ADD SWAP4 DUP5 SSTORE SWAP5 MLOAD DUP4 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 DUP4 ADD SSTORE SWAP3 MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP5 DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP2 SLOAD SWAP1 SWAP2 PUSH2 0x8F6 SWAP2 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP CALLER SWAP1 PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x94B PUSH2 0x9B4 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x97C PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x755 DUP2 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAAB DUP3 PUSH2 0xA74 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB15 JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD DUP8 DUP7 ADD MSTORE DUP6 DUP2 ADD MLOAD DUP7 DUP7 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP7 ADD MSTORE PUSH1 0x80 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP6 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xACF JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB3E DUP4 PUSH2 0xA74 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xBDD JUMPI PUSH2 0xBDD PUSH2 0xBB3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xBF7 JUMPI PUSH2 0xBF7 PUSH2 0xBB3 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC19 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC38 JUMPI PUSH2 0xC38 PUSH2 0xBB3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xC4F JUMPI PUSH2 0xC4F PUSH2 0xBB3 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC SUB PUSH7 0x237CE805EA1486 MUL PUSH11 0x151169494B3E32655F4A5E 0x25 0xD2 DUP4 SWAP2 PUSH32 0xD8B07E2664736F6C634300080900330000000000000000000000000000000000 ","sourceMap":"139:3935:5:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@FIL_PER_10T_766":{"entryPoint":null,"id":766,"parameterSlots":0,"returnSlots":0},"@LOCK_TIME_20_DAYS_774":{"entryPoint":null,"id":774,"parameterSlots":0,"returnSlots":0},"@LOCK_TIME_40_DAYS_777":{"entryPoint":null,"id":777,"parameterSlots":0,"returnSlots":0},"@MAX_DC_771":{"entryPoint":null,"id":771,"parameterSlots":0,"returnSlots":0},"@_964":{"entryPoint":null,"id":964,"parameterSlots":0,"returnSlots":0},"@_checkOwner_174":{"entryPoint":2484,"id":174,"parameterSlots":0,"returnSlots":0},"@_msgSender_717":{"entryPoint":null,"id":717,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_231":{"entryPoint":null,"id":231,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_77":{"entryPoint":2574,"id":77,"parameterSlots":1,"returnSlots":0},"@acceptOwnership_99":{"entryPoint":1758,"id":99,"parameterSlots":0,"returnSlots":0},"@getAllStakeInfo_1032":{"entryPoint":728,"id":1032,"parameterSlots":1,"returnSlots":1},"@getStakeCount_1045":{"entryPoint":null,"id":1045,"parameterSlots":1,"returnSlots":1},"@owner_160":{"entryPoint":null,"id":160,"parameterSlots":0,"returnSlots":1},"@pendingOwner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@renounceOwnership_188":{"entryPoint":1738,"id":188,"parameterSlots":0,"returnSlots":0},"@stake_882":{"entryPoint":1880,"id":882,"parameterSlots":2,"returnSlots":0},"@stakes_763":{"entryPoint":1136,"id":763,"parameterSlots":0,"returnSlots":0},"@transferOwnership_60":{"entryPoint":2371,"id":60,"parameterSlots":1,"returnSlots":0},"@unlock_960":{"entryPoint":1209,"id":960,"parameterSlots":1,"returnSlots":0},"abi_decode_address":{"entryPoint":2676,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2704,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2850,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256":{"entryPoint":2892,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":2917,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2738,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_577f9f22832ad519676df27ccdc6b9b586d9c52964b0a484f095709114b4ba37__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_67db24fb96157ffc95690acaffa6f80b67fb8b33c2e6e2423b24a66e659d1111__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_70a4a744132fc9399c082f0c459154fe3f5ba22b57af6b69242ec317d0c935a9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_93e52c649e5842b2507b13bc5680aa82df97b3d2e98fe279daf650cfaa29eb2e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a7af10a533e9d43872af748e13918bba08c14c708cbf9f2d974ba55f2d87022b__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f80ffa7094ca2e8a8c945ed590b9c49e91129095b7638a547251e702d46b801a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3044,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":3068,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":3102,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3133,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3017,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":2995,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":2973,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":2951,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8090:6","statements":[{"nodeType":"YulBlock","src":"6:3:6","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:6","statements":[{"nodeType":"YulAssignment","src":"73:29:6","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:6"},"nodeType":"YulFunctionCall","src":"82:20:6"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:6"}]},{"body":{"nodeType":"YulBlock","src":"165:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:6"},"nodeType":"YulFunctionCall","src":"167:12:6"},"nodeType":"YulExpressionStatement","src":"167:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:6"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:6","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:6"},"nodeType":"YulFunctionCall","src":"146:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:6"},"nodeType":"YulFunctionCall","src":"142:19:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:6"},"nodeType":"YulFunctionCall","src":"131:31:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:6"},"nodeType":"YulFunctionCall","src":"121:42:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:6"},"nodeType":"YulFunctionCall","src":"114:50:6"},"nodeType":"YulIf","src":"111:70:6"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:6","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:6","type":""}],"src":"14:173:6"},{"body":{"nodeType":"YulBlock","src":"262:116:6","statements":[{"body":{"nodeType":"YulBlock","src":"308:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:6"},"nodeType":"YulFunctionCall","src":"310:12:6"},"nodeType":"YulExpressionStatement","src":"310:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"283:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"292:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"279:3:6"},"nodeType":"YulFunctionCall","src":"279:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"304:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:6"},"nodeType":"YulFunctionCall","src":"275:32:6"},"nodeType":"YulIf","src":"272:52:6"},{"nodeType":"YulAssignment","src":"333:39:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"362:9:6"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"343:18:6"},"nodeType":"YulFunctionCall","src":"343:29:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"333:6:6"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"228:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"239:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"251:6:6","type":""}],"src":"192:186:6"},{"body":{"nodeType":"YulBlock","src":"586:818:6","statements":[{"nodeType":"YulVariableDeclaration","src":"596:12:6","value":{"kind":"number","nodeType":"YulLiteral","src":"606:2:6","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"600:2:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"617:32:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"635:9:6"},{"name":"_1","nodeType":"YulIdentifier","src":"646:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"631:3:6"},"nodeType":"YulFunctionCall","src":"631:18:6"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"621:6:6","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"665:9:6"},{"name":"_1","nodeType":"YulIdentifier","src":"676:2:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"658:6:6"},"nodeType":"YulFunctionCall","src":"658:21:6"},"nodeType":"YulExpressionStatement","src":"658:21:6"},{"nodeType":"YulVariableDeclaration","src":"688:17:6","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"699:6:6"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"692:3:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"714:27:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"734:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"728:5:6"},"nodeType":"YulFunctionCall","src":"728:13:6"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"718:6:6","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"757:6:6"},{"name":"length","nodeType":"YulIdentifier","src":"765:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"750:6:6"},"nodeType":"YulFunctionCall","src":"750:22:6"},"nodeType":"YulExpressionStatement","src":"750:22:6"},{"nodeType":"YulVariableDeclaration","src":"781:12:6","value":{"kind":"number","nodeType":"YulLiteral","src":"791:2:6","type":"","value":"64"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"785:2:6","type":""}]},{"nodeType":"YulAssignment","src":"802:25:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"813:9:6"},{"name":"_2","nodeType":"YulIdentifier","src":"824:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"809:3:6"},"nodeType":"YulFunctionCall","src":"809:18:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"802:3:6"}]},{"nodeType":"YulVariableDeclaration","src":"836:29:6","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"854:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"862:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:6"},"nodeType":"YulFunctionCall","src":"850:15:6"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"840:6:6","type":""}]},{"nodeType":"YulVariableDeclaration","src":"874:10:6","value":{"kind":"number","nodeType":"YulLiteral","src":"883:1:6","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"878:1:6","type":""}]},{"body":{"nodeType":"YulBlock","src":"942:436:6","statements":[{"nodeType":"YulVariableDeclaration","src":"956:23:6","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"972:6:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"966:5:6"},"nodeType":"YulFunctionCall","src":"966:13:6"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"960:2:6","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"999:3:6"},{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1010:2:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1004:5:6"},"nodeType":"YulFunctionCall","src":"1004:9:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"992:6:6"},"nodeType":"YulFunctionCall","src":"992:22:6"},"nodeType":"YulExpressionStatement","src":"992:22:6"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1038:3:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1043:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1034:3:6"},"nodeType":"YulFunctionCall","src":"1034:12:6"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1058:2:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1062:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1054:3:6"},"nodeType":"YulFunctionCall","src":"1054:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1048:5:6"},"nodeType":"YulFunctionCall","src":"1048:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1027:6:6"},"nodeType":"YulFunctionCall","src":"1027:40:6"},"nodeType":"YulExpressionStatement","src":"1027:40:6"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1091:3:6"},{"name":"_2","nodeType":"YulIdentifier","src":"1096:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1087:3:6"},"nodeType":"YulFunctionCall","src":"1087:12:6"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1111:2:6"},{"name":"_2","nodeType":"YulIdentifier","src":"1115:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1107:3:6"},"nodeType":"YulFunctionCall","src":"1107:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1101:5:6"},"nodeType":"YulFunctionCall","src":"1101:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1080:6:6"},"nodeType":"YulFunctionCall","src":"1080:40:6"},"nodeType":"YulExpressionStatement","src":"1080:40:6"},{"nodeType":"YulVariableDeclaration","src":"1133:14:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1143:4:6","type":"","value":"0x60"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"1137:2:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1171:3:6"},{"name":"_4","nodeType":"YulIdentifier","src":"1176:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1167:3:6"},"nodeType":"YulFunctionCall","src":"1167:12:6"},{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1191:2:6"},{"name":"_4","nodeType":"YulIdentifier","src":"1195:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1187:3:6"},"nodeType":"YulFunctionCall","src":"1187:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1181:5:6"},"nodeType":"YulFunctionCall","src":"1181:18:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1160:6:6"},"nodeType":"YulFunctionCall","src":"1160:40:6"},"nodeType":"YulExpressionStatement","src":"1160:40:6"},{"nodeType":"YulVariableDeclaration","src":"1213:14:6","value":{"kind":"number","nodeType":"YulLiteral","src":"1223:4:6","type":"","value":"0x80"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"1217:2:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1251:3:6"},{"name":"_5","nodeType":"YulIdentifier","src":"1256:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1247:3:6"},"nodeType":"YulFunctionCall","src":"1247:12:6"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1285:2:6"},{"name":"_5","nodeType":"YulIdentifier","src":"1289:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1281:3:6"},"nodeType":"YulFunctionCall","src":"1281:11:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1275:5:6"},"nodeType":"YulFunctionCall","src":"1275:18:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1268:6:6"},"nodeType":"YulFunctionCall","src":"1268:26:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1261:6:6"},"nodeType":"YulFunctionCall","src":"1261:34:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1240:6:6"},"nodeType":"YulFunctionCall","src":"1240:56:6"},"nodeType":"YulExpressionStatement","src":"1240:56:6"},{"nodeType":"YulAssignment","src":"1309:21:6","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1320:3:6"},{"kind":"number","nodeType":"YulLiteral","src":"1325:4:6","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1316:3:6"},"nodeType":"YulFunctionCall","src":"1316:14:6"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"1309:3:6"}]},{"nodeType":"YulAssignment","src":"1343:25:6","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"1357:6:6"},{"name":"_1","nodeType":"YulIdentifier","src":"1365:2:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1353:3:6"},"nodeType":"YulFunctionCall","src":"1353:15:6"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"1343:6:6"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"904:1:6"},{"name":"length","nodeType":"YulIdentifier","src":"907:6:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"901:2:6"},"nodeType":"YulFunctionCall","src":"901:13:6"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"915:18:6","statements":[{"nodeType":"YulAssignment","src":"917:14:6","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"926:1:6"},{"kind":"number","nodeType":"YulLiteral","src":"929:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"922:3:6"},"nodeType":"YulFunctionCall","src":"922:9:6"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"917:1:6"}]}]},"pre":{"nodeType":"YulBlock","src":"897:3:6","statements":[]},"src":"893:485:6"},{"nodeType":"YulAssignment","src":"1387:11:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"1395:3:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1387:4:6"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"555:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"566:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"577:4:6","type":""}],"src":"383:1021:6"},{"body":{"nodeType":"YulBlock","src":"1496:167:6","statements":[{"body":{"nodeType":"YulBlock","src":"1542:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1551:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1554:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1544:6:6"},"nodeType":"YulFunctionCall","src":"1544:12:6"},"nodeType":"YulExpressionStatement","src":"1544:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1517:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"1526:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1513:3:6"},"nodeType":"YulFunctionCall","src":"1513:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"1538:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1509:3:6"},"nodeType":"YulFunctionCall","src":"1509:32:6"},"nodeType":"YulIf","src":"1506:52:6"},{"nodeType":"YulAssignment","src":"1567:39:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1596:9:6"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1577:18:6"},"nodeType":"YulFunctionCall","src":"1577:29:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1567:6:6"}]},{"nodeType":"YulAssignment","src":"1615:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1642:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1653:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1638:3:6"},"nodeType":"YulFunctionCall","src":"1638:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1625:12:6"},"nodeType":"YulFunctionCall","src":"1625:32:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1615:6:6"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1454:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1465:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1477:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1485:6:6","type":""}],"src":"1409:254:6"},{"body":{"nodeType":"YulBlock","src":"1847:222:6","statements":[{"nodeType":"YulAssignment","src":"1857:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1869:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1880:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1865:3:6"},"nodeType":"YulFunctionCall","src":"1865:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1857:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1900:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"1911:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1893:6:6"},"nodeType":"YulFunctionCall","src":"1893:25:6"},"nodeType":"YulExpressionStatement","src":"1893:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1938:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1949:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1934:3:6"},"nodeType":"YulFunctionCall","src":"1934:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"1954:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1927:6:6"},"nodeType":"YulFunctionCall","src":"1927:34:6"},"nodeType":"YulExpressionStatement","src":"1927:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1981:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"1992:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1977:3:6"},"nodeType":"YulFunctionCall","src":"1977:18:6"},{"name":"value2","nodeType":"YulIdentifier","src":"1997:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1970:6:6"},"nodeType":"YulFunctionCall","src":"1970:34:6"},"nodeType":"YulExpressionStatement","src":"1970:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2024:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2035:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2020:3:6"},"nodeType":"YulFunctionCall","src":"2020:18:6"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"2054:6:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2047:6:6"},"nodeType":"YulFunctionCall","src":"2047:14:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2040:6:6"},"nodeType":"YulFunctionCall","src":"2040:22:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2013:6:6"},"nodeType":"YulFunctionCall","src":"2013:50:6"},"nodeType":"YulExpressionStatement","src":"2013:50:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1792:9:6","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1803:6:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1811:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1819:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1827:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1838:4:6","type":""}],"src":"1668:401:6"},{"body":{"nodeType":"YulBlock","src":"2144:110:6","statements":[{"body":{"nodeType":"YulBlock","src":"2190:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2199:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2202:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2192:6:6"},"nodeType":"YulFunctionCall","src":"2192:12:6"},"nodeType":"YulExpressionStatement","src":"2192:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2165:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2174:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2161:3:6"},"nodeType":"YulFunctionCall","src":"2161:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2186:2:6","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2157:3:6"},"nodeType":"YulFunctionCall","src":"2157:32:6"},"nodeType":"YulIf","src":"2154:52:6"},{"nodeType":"YulAssignment","src":"2215:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2238:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2225:12:6"},"nodeType":"YulFunctionCall","src":"2225:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2215:6:6"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2110:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2121:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2133:6:6","type":""}],"src":"2074:180:6"},{"body":{"nodeType":"YulBlock","src":"2360:76:6","statements":[{"nodeType":"YulAssignment","src":"2370:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2382:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2393:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2378:3:6"},"nodeType":"YulFunctionCall","src":"2378:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2370:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2412:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"2423:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2405:6:6"},"nodeType":"YulFunctionCall","src":"2405:25:6"},"nodeType":"YulExpressionStatement","src":"2405:25:6"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2329:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2340:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2351:4:6","type":""}],"src":"2259:177:6"},{"body":{"nodeType":"YulBlock","src":"2528:161:6","statements":[{"body":{"nodeType":"YulBlock","src":"2574:16:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2583:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2586:1:6","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2576:6:6"},"nodeType":"YulFunctionCall","src":"2576:12:6"},"nodeType":"YulExpressionStatement","src":"2576:12:6"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2549:7:6"},{"name":"headStart","nodeType":"YulIdentifier","src":"2558:9:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2545:3:6"},"nodeType":"YulFunctionCall","src":"2545:23:6"},{"kind":"number","nodeType":"YulLiteral","src":"2570:2:6","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2541:3:6"},"nodeType":"YulFunctionCall","src":"2541:32:6"},"nodeType":"YulIf","src":"2538:52:6"},{"nodeType":"YulAssignment","src":"2599:33:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2622:9:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2609:12:6"},"nodeType":"YulFunctionCall","src":"2609:23:6"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2599:6:6"}]},{"nodeType":"YulAssignment","src":"2641:42:6","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2668:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2679:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2664:3:6"},"nodeType":"YulFunctionCall","src":"2664:18:6"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2651:12:6"},"nodeType":"YulFunctionCall","src":"2651:32:6"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2641:6:6"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2486:9:6","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2497:7:6","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2509:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2517:6:6","type":""}],"src":"2441:248:6"},{"body":{"nodeType":"YulBlock","src":"2795:102:6","statements":[{"nodeType":"YulAssignment","src":"2805:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2817:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"2828:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2813:3:6"},"nodeType":"YulFunctionCall","src":"2813:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2805:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2847:9:6"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2862:6:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2878:3:6","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2883:1:6","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2874:3:6"},"nodeType":"YulFunctionCall","src":"2874:11:6"},{"kind":"number","nodeType":"YulLiteral","src":"2887:1:6","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2870:3:6"},"nodeType":"YulFunctionCall","src":"2870:19:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2858:3:6"},"nodeType":"YulFunctionCall","src":"2858:32:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2840:6:6"},"nodeType":"YulFunctionCall","src":"2840:51:6"},"nodeType":"YulExpressionStatement","src":"2840:51:6"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2764:9:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2775:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2786:4:6","type":""}],"src":"2694:203:6"},{"body":{"nodeType":"YulBlock","src":"2934:95:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:1:6","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2958:3:6","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2963:10:6","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2954:3:6"},"nodeType":"YulFunctionCall","src":"2954:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2944:6:6"},"nodeType":"YulFunctionCall","src":"2944:31:6"},"nodeType":"YulExpressionStatement","src":"2944:31:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2991:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2994:4:6","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2984:6:6"},"nodeType":"YulFunctionCall","src":"2984:15:6"},"nodeType":"YulExpressionStatement","src":"2984:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3015:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3018:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3008:6:6"},"nodeType":"YulFunctionCall","src":"3008:15:6"},"nodeType":"YulExpressionStatement","src":"3008:15:6"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"2902:127:6"},{"body":{"nodeType":"YulBlock","src":"3066:95:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3083:1:6","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3090:3:6","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3095:10:6","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3086:3:6"},"nodeType":"YulFunctionCall","src":"3086:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3076:6:6"},"nodeType":"YulFunctionCall","src":"3076:31:6"},"nodeType":"YulExpressionStatement","src":"3076:31:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3123:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3126:4:6","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3116:6:6"},"nodeType":"YulFunctionCall","src":"3116:15:6"},"nodeType":"YulExpressionStatement","src":"3116:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3147:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3150:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3140:6:6"},"nodeType":"YulFunctionCall","src":"3140:15:6"},"nodeType":"YulExpressionStatement","src":"3140:15:6"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"3034:127:6"},{"body":{"nodeType":"YulBlock","src":"3198:95:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3215:1:6","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3222:3:6","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3227:10:6","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3218:3:6"},"nodeType":"YulFunctionCall","src":"3218:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3208:6:6"},"nodeType":"YulFunctionCall","src":"3208:31:6"},"nodeType":"YulExpressionStatement","src":"3208:31:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3255:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3258:4:6","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3248:6:6"},"nodeType":"YulFunctionCall","src":"3248:15:6"},"nodeType":"YulExpressionStatement","src":"3248:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3279:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3282:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3272:6:6"},"nodeType":"YulFunctionCall","src":"3272:15:6"},"nodeType":"YulExpressionStatement","src":"3272:15:6"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"3166:127:6"},{"body":{"nodeType":"YulBlock","src":"3345:88:6","statements":[{"body":{"nodeType":"YulBlock","src":"3376:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"3378:16:6"},"nodeType":"YulFunctionCall","src":"3378:18:6"},"nodeType":"YulExpressionStatement","src":"3378:18:6"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3361:5:6"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3372:1:6","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3368:3:6"},"nodeType":"YulFunctionCall","src":"3368:6:6"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3358:2:6"},"nodeType":"YulFunctionCall","src":"3358:17:6"},"nodeType":"YulIf","src":"3355:43:6"},{"nodeType":"YulAssignment","src":"3407:20:6","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3418:5:6"},{"kind":"number","nodeType":"YulLiteral","src":"3425:1:6","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3414:3:6"},"nodeType":"YulFunctionCall","src":"3414:13:6"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3407:3:6"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3327:5:6","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3337:3:6","type":""}],"src":"3298:135:6"},{"body":{"nodeType":"YulBlock","src":"3612:165:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3629:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3640:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3622:6:6"},"nodeType":"YulFunctionCall","src":"3622:21:6"},"nodeType":"YulExpressionStatement","src":"3622:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3663:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3674:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3659:3:6"},"nodeType":"YulFunctionCall","src":"3659:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"3679:2:6","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3652:6:6"},"nodeType":"YulFunctionCall","src":"3652:30:6"},"nodeType":"YulExpressionStatement","src":"3652:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3713:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3698:3:6"},"nodeType":"YulFunctionCall","src":"3698:18:6"},{"hexValue":"496e76616c6964207374616b654964","kind":"string","nodeType":"YulLiteral","src":"3718:17:6","type":"","value":"Invalid stakeId"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3691:6:6"},"nodeType":"YulFunctionCall","src":"3691:45:6"},"nodeType":"YulExpressionStatement","src":"3691:45:6"},{"nodeType":"YulAssignment","src":"3745:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3757:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3768:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3753:3:6"},"nodeType":"YulFunctionCall","src":"3753:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3745:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_93e52c649e5842b2507b13bc5680aa82df97b3d2e98fe279daf650cfaa29eb2e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3589:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3603:4:6","type":""}],"src":"3438:339:6"},{"body":{"nodeType":"YulBlock","src":"3956:175:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3973:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"3984:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3966:6:6"},"nodeType":"YulFunctionCall","src":"3966:21:6"},"nodeType":"YulExpressionStatement","src":"3966:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4007:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4018:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4003:3:6"},"nodeType":"YulFunctionCall","src":"4003:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"4023:2:6","type":"","value":"25"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3996:6:6"},"nodeType":"YulFunctionCall","src":"3996:30:6"},"nodeType":"YulExpressionStatement","src":"3996:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4046:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4057:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4042:3:6"},"nodeType":"YulFunctionCall","src":"4042:18:6"},{"hexValue":"5374616b6520697320616c726561647920756e6c6f636b6564","kind":"string","nodeType":"YulLiteral","src":"4062:27:6","type":"","value":"Stake is already unlocked"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4035:6:6"},"nodeType":"YulFunctionCall","src":"4035:55:6"},"nodeType":"YulExpressionStatement","src":"4035:55:6"},{"nodeType":"YulAssignment","src":"4099:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4111:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4122:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4107:3:6"},"nodeType":"YulFunctionCall","src":"4107:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4099:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_577f9f22832ad519676df27ccdc6b9b586d9c52964b0a484f095709114b4ba37__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3933:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3947:4:6","type":""}],"src":"3782:349:6"},{"body":{"nodeType":"YulBlock","src":"4184:80:6","statements":[{"body":{"nodeType":"YulBlock","src":"4211:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"4213:16:6"},"nodeType":"YulFunctionCall","src":"4213:18:6"},"nodeType":"YulExpressionStatement","src":"4213:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4200:1:6"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"4207:1:6"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4203:3:6"},"nodeType":"YulFunctionCall","src":"4203:6:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4197:2:6"},"nodeType":"YulFunctionCall","src":"4197:13:6"},"nodeType":"YulIf","src":"4194:39:6"},{"nodeType":"YulAssignment","src":"4242:16:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"4253:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"4256:1:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4249:3:6"},"nodeType":"YulFunctionCall","src":"4249:9:6"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"4242:3:6"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"4167:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"4170:1:6","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"4176:3:6","type":""}],"src":"4136:128:6"},{"body":{"nodeType":"YulBlock","src":"4443:171:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4460:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4471:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4453:6:6"},"nodeType":"YulFunctionCall","src":"4453:21:6"},"nodeType":"YulExpressionStatement","src":"4453:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4494:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4505:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4490:3:6"},"nodeType":"YulFunctionCall","src":"4490:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"4510:2:6","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4483:6:6"},"nodeType":"YulFunctionCall","src":"4483:30:6"},"nodeType":"YulExpressionStatement","src":"4483:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4533:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4544:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4529:3:6"},"nodeType":"YulFunctionCall","src":"4529:18:6"},{"hexValue":"5374616b65206973207374696c6c206c6f636b6564","kind":"string","nodeType":"YulLiteral","src":"4549:23:6","type":"","value":"Stake is still locked"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4522:6:6"},"nodeType":"YulFunctionCall","src":"4522:51:6"},"nodeType":"YulExpressionStatement","src":"4522:51:6"},{"nodeType":"YulAssignment","src":"4582:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4594:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"4605:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4590:3:6"},"nodeType":"YulFunctionCall","src":"4590:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4582:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_70a4a744132fc9399c082f0c459154fe3f5ba22b57af6b69242ec317d0c935a9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4420:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4434:4:6","type":""}],"src":"4269:345:6"},{"body":{"nodeType":"YulBlock","src":"4810:14:6","statements":[{"nodeType":"YulAssignment","src":"4812:10:6","value":{"name":"pos","nodeType":"YulIdentifier","src":"4819:3:6"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4812:3:6"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4794:3:6","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4802:3:6","type":""}],"src":"4619:205:6"},{"body":{"nodeType":"YulBlock","src":"5003:165:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5031:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5013:6:6"},"nodeType":"YulFunctionCall","src":"5013:21:6"},"nodeType":"YulExpressionStatement","src":"5013:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5054:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5065:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5050:3:6"},"nodeType":"YulFunctionCall","src":"5050:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"5070:2:6","type":"","value":"15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5043:6:6"},"nodeType":"YulFunctionCall","src":"5043:30:6"},"nodeType":"YulExpressionStatement","src":"5043:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5093:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5104:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5089:3:6"},"nodeType":"YulFunctionCall","src":"5089:18:6"},{"hexValue":"5472616e73666572206661696c6564","kind":"string","nodeType":"YulLiteral","src":"5109:17:6","type":"","value":"Transfer failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5082:6:6"},"nodeType":"YulFunctionCall","src":"5082:45:6"},"nodeType":"YulExpressionStatement","src":"5082:45:6"},{"nodeType":"YulAssignment","src":"5136:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5148:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5159:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5144:3:6"},"nodeType":"YulFunctionCall","src":"5144:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5136:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4980:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4994:4:6","type":""}],"src":"4829:339:6"},{"body":{"nodeType":"YulBlock","src":"5302:119:6","statements":[{"nodeType":"YulAssignment","src":"5312:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5324:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5335:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5320:3:6"},"nodeType":"YulFunctionCall","src":"5320:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5312:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5354:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"5365:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5347:6:6"},"nodeType":"YulFunctionCall","src":"5347:25:6"},"nodeType":"YulExpressionStatement","src":"5347:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5392:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5403:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5388:3:6"},"nodeType":"YulFunctionCall","src":"5388:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"5408:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5381:6:6"},"nodeType":"YulFunctionCall","src":"5381:34:6"},"nodeType":"YulExpressionStatement","src":"5381:34:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5263:9:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5274:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5282:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5293:4:6","type":""}],"src":"5173:248:6"},{"body":{"nodeType":"YulBlock","src":"5600:231:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5617:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5628:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5610:6:6"},"nodeType":"YulFunctionCall","src":"5610:21:6"},"nodeType":"YulExpressionStatement","src":"5610:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5651:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5662:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5647:3:6"},"nodeType":"YulFunctionCall","src":"5647:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"5667:2:6","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5640:6:6"},"nodeType":"YulFunctionCall","src":"5640:30:6"},"nodeType":"YulExpressionStatement","src":"5640:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5690:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5701:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5686:3:6"},"nodeType":"YulFunctionCall","src":"5686:18:6"},{"hexValue":"4f776e61626c6532537465703a2063616c6c6572206973206e6f742074686520","kind":"string","nodeType":"YulLiteral","src":"5706:34:6","type":"","value":"Ownable2Step: caller is not the "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5679:6:6"},"nodeType":"YulFunctionCall","src":"5679:62:6"},"nodeType":"YulExpressionStatement","src":"5679:62:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5761:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5772:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5757:3:6"},"nodeType":"YulFunctionCall","src":"5757:18:6"},{"hexValue":"6e6577206f776e6572","kind":"string","nodeType":"YulLiteral","src":"5777:11:6","type":"","value":"new owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5750:6:6"},"nodeType":"YulFunctionCall","src":"5750:39:6"},"nodeType":"YulExpressionStatement","src":"5750:39:6"},{"nodeType":"YulAssignment","src":"5798:27:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5810:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"5821:3:6","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5806:3:6"},"nodeType":"YulFunctionCall","src":"5806:19:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5798:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5577:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5591:4:6","type":""}],"src":"5426:405:6"},{"body":{"nodeType":"YulBlock","src":"6010:168:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6027:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6038:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6020:6:6"},"nodeType":"YulFunctionCall","src":"6020:21:6"},"nodeType":"YulExpressionStatement","src":"6020:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6061:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6072:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6057:3:6"},"nodeType":"YulFunctionCall","src":"6057:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"6077:2:6","type":"","value":"18"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6050:6:6"},"nodeType":"YulFunctionCall","src":"6050:30:6"},"nodeType":"YulExpressionStatement","src":"6050:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6100:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6111:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6096:3:6"},"nodeType":"YulFunctionCall","src":"6096:18:6"},{"hexValue":"496e76616c6964207374616b652074797065","kind":"string","nodeType":"YulLiteral","src":"6116:20:6","type":"","value":"Invalid stake type"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6089:6:6"},"nodeType":"YulFunctionCall","src":"6089:48:6"},"nodeType":"YulExpressionStatement","src":"6089:48:6"},{"nodeType":"YulAssignment","src":"6146:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6158:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6169:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6154:3:6"},"nodeType":"YulFunctionCall","src":"6154:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6146:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_f80ffa7094ca2e8a8c945ed590b9c49e91129095b7638a547251e702d46b801a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5987:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6001:4:6","type":""}],"src":"5836:342:6"},{"body":{"nodeType":"YulBlock","src":"6357:164:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6374:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6385:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6367:6:6"},"nodeType":"YulFunctionCall","src":"6367:21:6"},"nodeType":"YulExpressionStatement","src":"6367:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6408:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6419:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6404:3:6"},"nodeType":"YulFunctionCall","src":"6404:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"6424:2:6","type":"","value":"14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6397:6:6"},"nodeType":"YulFunctionCall","src":"6397:30:6"},"nodeType":"YulExpressionStatement","src":"6397:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6447:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6458:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6443:3:6"},"nodeType":"YulFunctionCall","src":"6443:18:6"},{"hexValue":"45786365656473206d6178204443","kind":"string","nodeType":"YulLiteral","src":"6463:16:6","type":"","value":"Exceeds max DC"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6436:6:6"},"nodeType":"YulFunctionCall","src":"6436:44:6"},"nodeType":"YulExpressionStatement","src":"6436:44:6"},{"nodeType":"YulAssignment","src":"6489:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6501:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"6512:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6497:3:6"},"nodeType":"YulFunctionCall","src":"6497:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6489:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_a7af10a533e9d43872af748e13918bba08c14c708cbf9f2d974ba55f2d87022b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6334:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6348:4:6","type":""}],"src":"6183:338:6"},{"body":{"nodeType":"YulBlock","src":"6572:171:6","statements":[{"body":{"nodeType":"YulBlock","src":"6603:111:6","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6624:1:6","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6631:3:6","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"6636:10:6","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"6627:3:6"},"nodeType":"YulFunctionCall","src":"6627:20:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6617:6:6"},"nodeType":"YulFunctionCall","src":"6617:31:6"},"nodeType":"YulExpressionStatement","src":"6617:31:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6668:1:6","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"6671:4:6","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6661:6:6"},"nodeType":"YulFunctionCall","src":"6661:15:6"},"nodeType":"YulExpressionStatement","src":"6661:15:6"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6696:1:6","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6699:4:6","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6689:6:6"},"nodeType":"YulFunctionCall","src":"6689:15:6"},"nodeType":"YulExpressionStatement","src":"6689:15:6"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6592:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6585:6:6"},"nodeType":"YulFunctionCall","src":"6585:9:6"},"nodeType":"YulIf","src":"6582:132:6"},{"nodeType":"YulAssignment","src":"6723:14:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6732:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"6735:1:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6728:3:6"},"nodeType":"YulFunctionCall","src":"6728:9:6"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"6723:1:6"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6557:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"6560:1:6","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"6566:1:6","type":""}],"src":"6526:217:6"},{"body":{"nodeType":"YulBlock","src":"6800:116:6","statements":[{"body":{"nodeType":"YulBlock","src":"6859:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6861:16:6"},"nodeType":"YulFunctionCall","src":"6861:18:6"},"nodeType":"YulExpressionStatement","src":"6861:18:6"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6831:1:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6824:6:6"},"nodeType":"YulFunctionCall","src":"6824:9:6"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6817:6:6"},"nodeType":"YulFunctionCall","src":"6817:17:6"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"6839:1:6"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6850:1:6","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6846:3:6"},"nodeType":"YulFunctionCall","src":"6846:6:6"},{"name":"x","nodeType":"YulIdentifier","src":"6854:1:6"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"6842:3:6"},"nodeType":"YulFunctionCall","src":"6842:14:6"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6836:2:6"},"nodeType":"YulFunctionCall","src":"6836:21:6"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6813:3:6"},"nodeType":"YulFunctionCall","src":"6813:45:6"},"nodeType":"YulIf","src":"6810:71:6"},{"nodeType":"YulAssignment","src":"6890:20:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6905:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"6908:1:6"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6901:3:6"},"nodeType":"YulFunctionCall","src":"6901:9:6"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"6890:7:6"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6779:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"6782:1:6","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"6788:7:6","type":""}],"src":"6748:168:6"},{"body":{"nodeType":"YulBlock","src":"7095:178:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7112:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7123:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7105:6:6"},"nodeType":"YulFunctionCall","src":"7105:21:6"},"nodeType":"YulExpressionStatement","src":"7105:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7146:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7157:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7142:3:6"},"nodeType":"YulFunctionCall","src":"7142:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"7162:2:6","type":"","value":"28"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7135:6:6"},"nodeType":"YulFunctionCall","src":"7135:30:6"},"nodeType":"YulExpressionStatement","src":"7135:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7185:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7196:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7181:3:6"},"nodeType":"YulFunctionCall","src":"7181:18:6"},{"hexValue":"496e73756666696369656e742046494c20666f72207374616b696e67","kind":"string","nodeType":"YulLiteral","src":"7201:30:6","type":"","value":"Insufficient FIL for staking"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7174:6:6"},"nodeType":"YulFunctionCall","src":"7174:58:6"},"nodeType":"YulExpressionStatement","src":"7174:58:6"},{"nodeType":"YulAssignment","src":"7241:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7253:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7264:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7249:3:6"},"nodeType":"YulFunctionCall","src":"7249:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7241:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_67db24fb96157ffc95690acaffa6f80b67fb8b33c2e6e2423b24a66e659d1111__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7072:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7086:4:6","type":""}],"src":"6921:352:6"},{"body":{"nodeType":"YulBlock","src":"7327:76:6","statements":[{"body":{"nodeType":"YulBlock","src":"7349:22:6","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7351:16:6"},"nodeType":"YulFunctionCall","src":"7351:18:6"},"nodeType":"YulExpressionStatement","src":"7351:18:6"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7343:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"7346:1:6"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7340:2:6"},"nodeType":"YulFunctionCall","src":"7340:8:6"},"nodeType":"YulIf","src":"7337:34:6"},{"nodeType":"YulAssignment","src":"7380:17:6","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7392:1:6"},{"name":"y","nodeType":"YulIdentifier","src":"7395:1:6"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7388:3:6"},"nodeType":"YulFunctionCall","src":"7388:9:6"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"7380:4:6"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7309:1:6","type":""},{"name":"y","nodeType":"YulTypedName","src":"7312:1:6","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"7318:4:6","type":""}],"src":"7278:125:6"},{"body":{"nodeType":"YulBlock","src":"7565:162:6","statements":[{"nodeType":"YulAssignment","src":"7575:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7587:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7598:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7583:3:6"},"nodeType":"YulFunctionCall","src":"7583:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7575:4:6"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7617:9:6"},{"name":"value0","nodeType":"YulIdentifier","src":"7628:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7610:6:6"},"nodeType":"YulFunctionCall","src":"7610:25:6"},"nodeType":"YulExpressionStatement","src":"7610:25:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7655:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7666:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7651:3:6"},"nodeType":"YulFunctionCall","src":"7651:18:6"},{"name":"value1","nodeType":"YulIdentifier","src":"7671:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7644:6:6"},"nodeType":"YulFunctionCall","src":"7644:34:6"},"nodeType":"YulExpressionStatement","src":"7644:34:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7698:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7709:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7694:3:6"},"nodeType":"YulFunctionCall","src":"7694:18:6"},{"name":"value2","nodeType":"YulIdentifier","src":"7714:6:6"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7687:6:6"},"nodeType":"YulFunctionCall","src":"7687:34:6"},"nodeType":"YulExpressionStatement","src":"7687:34:6"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7518:9:6","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7529:6:6","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7537:6:6","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7545:6:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7556:4:6","type":""}],"src":"7408:319:6"},{"body":{"nodeType":"YulBlock","src":"7906:182:6","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7923:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7934:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7916:6:6"},"nodeType":"YulFunctionCall","src":"7916:21:6"},"nodeType":"YulExpressionStatement","src":"7916:21:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7957:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"7968:2:6","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7953:3:6"},"nodeType":"YulFunctionCall","src":"7953:18:6"},{"kind":"number","nodeType":"YulLiteral","src":"7973:2:6","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7946:6:6"},"nodeType":"YulFunctionCall","src":"7946:30:6"},"nodeType":"YulExpressionStatement","src":"7946:30:6"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7996:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8007:2:6","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7992:3:6"},"nodeType":"YulFunctionCall","src":"7992:18:6"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"8012:34:6","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7985:6:6"},"nodeType":"YulFunctionCall","src":"7985:62:6"},"nodeType":"YulExpressionStatement","src":"7985:62:6"},{"nodeType":"YulAssignment","src":"8056:26:6","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8068:9:6"},{"kind":"number","nodeType":"YulLiteral","src":"8079:2:6","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8064:3:6"},"nodeType":"YulFunctionCall","src":"8064:18:6"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8056:4:6"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7883:9:6","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7897:4:6","type":""}],"src":"7732:356:6"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_StakeInfo_$757_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        let _2 := 64\n        pos := add(headStart, _2)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            let _3 := mload(srcPtr)\n            mstore(pos, mload(_3))\n            mstore(add(pos, _1), mload(add(_3, _1)))\n            mstore(add(pos, _2), mload(add(_3, _2)))\n            let _4 := 0x60\n            mstore(add(pos, _4), mload(add(_3, _4)))\n            let _5 := 0x80\n            mstore(add(pos, _5), iszero(iszero(mload(add(_3, _5)))))\n            pos := add(pos, 0xa0)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_93e52c649e5842b2507b13bc5680aa82df97b3d2e98fe279daf650cfaa29eb2e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Invalid stakeId\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_577f9f22832ad519676df27ccdc6b9b586d9c52964b0a484f095709114b4ba37__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"Stake is already unlocked\")\n        tail := add(headStart, 96)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_70a4a744132fc9399c082f0c459154fe3f5ba22b57af6b69242ec317d0c935a9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Stake is still locked\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Transfer failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_225559eb8402045bea7ff07c35d0ad8c0547830223ac1c21d44fb948d6896ebc__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"Ownable2Step: caller is not the \")\n        mstore(add(headStart, 96), \"new owner\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f80ffa7094ca2e8a8c945ed590b9c49e91129095b7638a547251e702d46b801a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Invalid stake type\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a7af10a533e9d43872af748e13918bba08c14c708cbf9f2d974ba55f2d87022b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Exceeds max DC\")\n        tail := add(headStart, 96)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_67db24fb96157ffc95690acaffa6f80b67fb8b33c2e6e2423b24a66e659d1111__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 28)\n        mstore(add(headStart, 64), \"Insufficient FIL for staking\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n}","id":6,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"6080604052600436106100e15760003560e01c80638da5cb5b1161007f578063d1d7e10a11610059578063d1d7e10a14610267578063e30c397814610283578063f158adf2146102a1578063f2fde38b146102b857600080fd5b80638da5cb5b146101e9578063bb224d6e1461021b578063cf57ee691461023157600080fd5b806361cbfa50116100bb57806361cbfa5014610187578063715018a6146101ac57806379ba5097146101c15780637b0472f0146101d657600080fd5b8063559566b9146100ed578063584b62a1146101235780636198e3391461016557600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610a90565b6102d8565b60405161011a9190610ab2565b60405180910390f35b34801561012f57600080fd5b5061014361013e366004610b22565b610470565b604080519485526020850193909352918301521515606082015260800161011a565b34801561017157600080fd5b50610185610180366004610b4c565b6104b9565b005b34801561019357600080fd5b5061019e6234bc0081565b60405190815260200161011a565b3480156101b857600080fd5b506101856106ca565b3480156101cd57600080fd5b506101856106de565b6101856101e4366004610b65565b610758565b3480156101f557600080fd5b506033546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b34801561022757600080fd5b5061019e61080081565b34801561023d57600080fd5b5061019e61024c366004610a90565b6001600160a01b031660009081526097602052604090205490565b34801561027357600080fd5b5061019e670de0b6b3a764000081565b34801561028f57600080fd5b506065546001600160a01b0316610203565b3480156102ad57600080fd5b5061019e621a5e0081565b3480156102c457600080fd5b506101856102d3366004610a90565b610943565b6001600160a01b0381166000908152609760205260408120546060918167ffffffffffffffff81111561030d5761030d610b87565b60405190808252806020026020018201604052801561037257816020015b61035f6040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b81526020019060019003908161032b5790505b50905060005b82811015610468576001600160a01b03851660009081526097602052604081208054839081106103aa576103aa610b9d565b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506040518060a001604052808381526020018260000151815260200182602001518152602001826040015181526020018260600151151581525083838151811061044957610449610b9d565b602002602001018190525050808061046090610bc9565b915050610378565b509392505050565b6097602052816000526040600020818154811061048c57600080fd5b60009182526020909120600490910201805460018201546002830154600390930154919450925060ff1684565b33600090815260976020526040902054811061050e5760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081cdd185ad95259608a1b60448201526064015b60405180910390fd5b33600090815260976020526040812080548390811061052f5761052f610b9d565b60009182526020909120600490910201600381015490915060ff166105965760405162461bcd60e51b815260206004820152601960248201527f5374616b6520697320616c726561647920756e6c6f636b6564000000000000006044820152606401610505565b806002015481600101546105aa9190610be4565b4210156105f15760405162461bcd60e51b815260206004820152601560248201527414dd185ad9481a5cc81cdd1a5b1b081b1bd8dad959605a1b6044820152606401610505565b805460038201805460ff19169055604051600090339083908381818185875af1925050503d8060008114610641576040519150601f19603f3d011682016040523d82523d6000602084013e610646565b606091505b50509050806106895760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610505565b604080518381526020810186905233917f7fc4727e062e336010f2c282598ef5f14facb3de68cf8195c2f23e1454b2b74e910160405180910390a250505050565b6106d26109b4565b6106dc6000610a0e565b565b60655433906001600160a01b0316811461074c5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b6064820152608401610505565b61075581610a0e565b50565b8015806107655750806001145b6107a65760405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207374616b65207479706560701b6044820152606401610505565b6108008211156107e95760405162461bcd60e51b815260206004820152600e60248201526d45786365656473206d617820444360901b6044820152606401610505565b600081156107fa576234bc006107ff565b621a5e005b90506000670de0b6b3a7640000610817600a86610bfc565b6108219190610c1e565b9050803410156108735760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e742046494c20666f72207374616b696e67000000006044820152606401610505565b33600081815260976020818152604080842081516080810183523481524281850190815292810189815260016060830181815284548083018655858a52878a20945160049091029094019384559451838201559051600283015592516003909101805460ff1916911515919091179055948452919052915490916108f691610c3d565b604080513481526020810186905290810182905290915033907fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed9060600160405180910390a25050505050565b61094b6109b4565b606580546001600160a01b0383166001600160a01b0319909116811790915561097c6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6033546001600160a01b031633146106dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610505565b606580546001600160a01b031916905561075581603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b0381168114610a8b57600080fd5b919050565b600060208284031215610aa257600080fd5b610aab82610a74565b9392505050565b602080825282518282018190526000919060409081850190868401855b82811015610b1557815180518552868101518786015285810151868601526060808201519086015260809081015115159085015260a09093019290850190600101610acf565b5091979650505050505050565b60008060408385031215610b3557600080fd5b610b3e83610a74565b946020939093013593505050565b600060208284031215610b5e57600080fd5b5035919050565b60008060408385031215610b7857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610bdd57610bdd610bb3565b5060010190565b60008219821115610bf757610bf7610bb3565b500190565b600082610c1957634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610c3857610c38610bb3565b500290565b600082821015610c4f57610c4f610bb3565b50039056fea2646970667358221220dc0366237ce805ea1486026a151169494b3e32655f4a5e25d283917fd8b07e2664736f6c63430008090033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE1 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7F JUMPI DUP1 PUSH4 0xD1D7E10A GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xD1D7E10A EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xE30C3978 EQ PUSH2 0x283 JUMPI DUP1 PUSH4 0xF158ADF2 EQ PUSH2 0x2A1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xBB224D6E EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0xCF57EE69 EQ PUSH2 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61CBFA50 GT PUSH2 0xBB JUMPI DUP1 PUSH4 0x61CBFA50 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1AC JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x7B0472F0 EQ PUSH2 0x1D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x559566B9 EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x584B62A1 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x6198E339 EQ PUSH2 0x165 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0xE8 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11A SWAP2 SWAP1 PUSH2 0xAB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x143 PUSH2 0x13E CALLDATASIZE PUSH1 0x4 PUSH2 0xB22 JUMP JUMPDEST PUSH2 0x470 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x11A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xB4C JUMP JUMPDEST PUSH2 0x4B9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x193 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH3 0x34BC00 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x6CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x6DE JUMP JUMPDEST PUSH2 0x185 PUSH2 0x1E4 CALLDATASIZE PUSH1 0x4 PUSH2 0xB65 JUMP JUMPDEST PUSH2 0x758 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x11A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH2 0x800 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH2 0x24C CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x273 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x203 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH3 0x1A5E00 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH2 0x2D3 CALLDATASIZE PUSH1 0x4 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x943 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x60 SWAP2 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30D JUMPI PUSH2 0x30D PUSH2 0xB87 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x372 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x35F PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x32B JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x468 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x3AA JUMPI PUSH2 0x3AA PUSH2 0xB9D JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE POP POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x0 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x20 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x40 ADD MLOAD DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x60 ADD MLOAD ISZERO ISZERO DUP2 MSTORE POP DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x449 JUMPI PUSH2 0x449 PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP POP DUP1 DUP1 PUSH2 0x460 SWAP1 PUSH2 0xBC9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x378 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x97 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x48C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH1 0xFF AND DUP5 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT PUSH2 0x50E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x125B9D985B1A59081CDD185AD95259 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x52F JUMPI PUSH2 0x52F PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD PUSH1 0x3 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5374616B6520697320616C726561647920756E6C6F636B656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST DUP1 PUSH1 0x2 ADD SLOAD DUP2 PUSH1 0x1 ADD SLOAD PUSH2 0x5AA SWAP2 SWAP1 PUSH2 0xBE4 JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x14DD185AD9481A5CC81CDD1A5B1B081B1BD8DAD959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 DUP4 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x641 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x646 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x689 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x151C985B9CD9995C8819985A5B1959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x7FC4727E062E336010F2C282598EF5F14FACB3DE68CF8195C2F23E1454B2B74E SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH2 0x6D2 PUSH2 0x9B4 JUMP JUMPDEST PUSH2 0x6DC PUSH1 0x0 PUSH2 0xA0E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x65 SLOAD CALLER SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 EQ PUSH2 0x74C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C6532537465703A2063616C6C6572206973206E6F742074686520 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x3732BB9037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x505 JUMP JUMPDEST PUSH2 0x755 DUP2 PUSH2 0xA0E JUMP JUMPDEST POP JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 0x765 JUMPI POP DUP1 PUSH1 0x1 EQ JUMPDEST PUSH2 0x7A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH18 0x496E76616C6964207374616B652074797065 PUSH1 0x70 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH2 0x800 DUP3 GT ISZERO PUSH2 0x7E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x45786365656473206D6178204443 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO PUSH2 0x7FA JUMPI PUSH3 0x34BC00 PUSH2 0x7FF JUMP JUMPDEST PUSH3 0x1A5E00 JUMPDEST SWAP1 POP PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 PUSH2 0x817 PUSH1 0xA DUP7 PUSH2 0xBFC JUMP JUMPDEST PUSH2 0x821 SWAP2 SWAP1 PUSH2 0xC1E JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0x873 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742046494C20666F72207374616B696E6700000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x97 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE CALLVALUE DUP2 MSTORE TIMESTAMP DUP2 DUP6 ADD SWAP1 DUP2 MSTORE SWAP3 DUP2 ADD DUP10 DUP2 MSTORE PUSH1 0x1 PUSH1 0x60 DUP4 ADD DUP2 DUP2 MSTORE DUP5 SLOAD DUP1 DUP4 ADD DUP7 SSTORE DUP6 DUP11 MSTORE DUP8 DUP11 KECCAK256 SWAP5 MLOAD PUSH1 0x4 SWAP1 SWAP2 MUL SWAP1 SWAP5 ADD SWAP4 DUP5 SSTORE SWAP5 MLOAD DUP4 DUP3 ADD SSTORE SWAP1 MLOAD PUSH1 0x2 DUP4 ADD SSTORE SWAP3 MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP5 DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP2 SLOAD SWAP1 SWAP2 PUSH2 0x8F6 SWAP2 PUSH2 0xC3D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP7 SWAP1 MSTORE SWAP1 DUP2 ADD DUP3 SWAP1 MSTORE SWAP1 SWAP2 POP CALLER SWAP1 PUSH32 0xB4CAAF29ADDA3EEFEE3AD552A8E85058589BF834C7466CAE4EE58787F70589ED SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x94B PUSH2 0x9B4 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x97C PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x38D16B8CAC22D99FC7C124B9CD0DE2D3FA1FAEF420BFE791D8C362D765E22700 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x6DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x505 JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH2 0x755 DUP2 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAAB DUP3 PUSH2 0xA74 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x40 SWAP1 DUP2 DUP6 ADD SWAP1 DUP7 DUP5 ADD DUP6 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xB15 JUMPI DUP2 MLOAD DUP1 MLOAD DUP6 MSTORE DUP7 DUP2 ADD MLOAD DUP8 DUP7 ADD MSTORE DUP6 DUP2 ADD MLOAD DUP7 DUP7 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MLOAD SWAP1 DUP7 ADD MSTORE PUSH1 0x80 SWAP1 DUP2 ADD MLOAD ISZERO ISZERO SWAP1 DUP6 ADD MSTORE PUSH1 0xA0 SWAP1 SWAP4 ADD SWAP3 SWAP1 DUP6 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0xACF JUMP JUMPDEST POP SWAP2 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB3E DUP4 PUSH2 0xA74 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xB78 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0xBDD JUMPI PUSH2 0xBDD PUSH2 0xBB3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xBF7 JUMPI PUSH2 0xBF7 PUSH2 0xBB3 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC19 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC38 JUMPI PUSH2 0xC38 PUSH2 0xBB3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xC4F JUMPI PUSH2 0xC4F PUSH2 0xBB3 JUMP JUMPDEST POP SUB SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC SUB PUSH7 0x237CE805EA1486 MUL PUSH11 0x151169494B3E32655F4A5E 0x25 0xD2 DUP4 SWAP2 PUSH32 0xD8B07E2664736F6C634300080900330000000000000000000000000000000000 ","sourceMap":"139:3935:5:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3266:647;;;;;;;;;;-1:-1:-1;3266:647:5;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;855:41;;;;;;;;;;-1:-1:-1;855:41:5;;;;;:::i;:::-;;:::i;:::-;;;;1893:25:6;;;1949:2;1934:18;;1927:34;;;;1977:18;;;1970:34;2047:14;2040:22;2035:2;2020:18;;2013:50;1880:3;1865:19;855:41:5;1668:401:6;2411:678:5;;;;;;;;;;-1:-1:-1;2411:678:5;;;;;:::i;:::-;;:::i;:::-;;1201:51;;;;;;;;;;;;1245:7;1201:51;;;;;2405:25:6;;;2393:2;2378:18;1201:51:5;2259:177:6;2071:101:1;;;;;;;;;;;;;:::i;2010:206:0:-;;;;;;;;;;;;;:::i;1446:910:5:-;;;;;;:::i;:::-;;:::i;1441:85:1:-;;;;;;;;;;-1:-1:-1;1513:6:1;;-1:-1:-1;;;;;1513:6:1;1441:85;;;-1:-1:-1;;;;;2858:32:6;;;2840:51;;2828:2;2813:18;1441:85:1;2694:203:6;1054:41:5;;;;;;;;;;;;1087:8;1054:41;;3960:112;;;;;;;;;;-1:-1:-1;3960:112:5;;;;;:::i;:::-;-1:-1:-1;;;;;4046:12:5;4020:7;4046:12;;;:6;:12;;;;;:19;;3960:112;981:45;;;;;;;;;;;;1019:7;981:45;;1123:99:0;;;;;;;;;;-1:-1:-1;1202:13:0;;-1:-1:-1;;;;;1202:13:0;1123:99;;1144:51:5;;;;;;;;;;;;1188:7;1144:51;;1415:178:0;;;;;;;;;;-1:-1:-1;1415:178:0;;;;;:::i;:::-;;:::i;3266:647:5:-;-1:-1:-1;;;;;3379:12:5;;3358:18;3379:12;;;:6;:12;;;;;:19;3328:18;;3379:19;3442:27;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3442:27:5;;;;;;;;;;;;;;;;;3408:61;;3513:9;3508:369;3532:10;3528:1;:14;3508:369;;;-1:-1:-1;;;;;3588:12:5;;3563:22;3588:12;;;:6;:12;;;;;:15;;3601:1;;3588:15;;;;;;:::i;:::-;;;;;;;;;;;3563:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3635:231;;;;;;;;3672:1;3635:231;;;;3699:9;:16;;;3635:231;;;;3744:9;:19;;;3635:231;;;;3791:9;:18;;;3635:231;;;;3835:9;:16;;;3635:231;;;;;3617:12;3630:1;3617:15;;;;;;;;:::i;:::-;;;;;;:249;;;;3549:328;3544:3;;;;;:::i;:::-;;;;3508:369;;;-1:-1:-1;3894:12:5;3266:647;-1:-1:-1;;;3266:647:5:o;855:41::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;855:41:5;-1:-1:-1;855:41:5;;;:::o;2411:678::-;2488:10;2481:18;;;;:6;:18;;;;;:25;2471:35;;2463:63;;;;-1:-1:-1;;;2463:63:5;;3640:2:6;2463:63:5;;;3622:21:6;3679:2;3659:18;;;3652:30;-1:-1:-1;;;3698:18:6;;;3691:45;3753:18;;2463:63:5;;;;;;;;;2570:10;2537:23;2563:18;;;:6;:18;;;;;:27;;2582:7;;2563:27;;;;;;:::i;:::-;;;;;;;;;;;;;;2608:16;;;;2563:27;;-1:-1:-1;2608:16:5;;2600:54;;;;-1:-1:-1;;;2600:54:5;;3984:2:6;2600:54:5;;;3966:21:6;4023:2;4003:18;;;3996:30;4062:27;4042:18;;;4035:55;4107:18;;2600:54:5;3782:349:6;2600:54:5;2713:9;:18;;;2691:9;:19;;;:40;;;;:::i;:::-;2672:15;:59;;2664:93;;;;-1:-1:-1;;;2664:93:5;;4471:2:6;2664:93:5;;;4453:21:6;4510:2;4490:18;;;4483:30;-1:-1:-1;;;4529:18:6;;;4522:51;4590:18;;2664:93:5;4269:345:6;2664:93:5;2793:16;;2819;;;:24;;-1:-1:-1;;2819:24:5;;;2934:42;;-1:-1:-1;;2934:10:5;;2793:16;;-1:-1:-1;2934:42:5;-1:-1:-1;2934:42:5;2793:16;2934:10;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2915:61;;;2994:7;2986:35;;;;-1:-1:-1;;;2986:35:5;;5031:2:6;2986:35:5;;;5013:21:6;5070:2;5050:18;;;5043:30;-1:-1:-1;;;5089:18:6;;;5082:45;5144:18;;2986:35:5;4829:339:6;2986:35:5;3037:45;;;5347:25:6;;;5403:2;5388:18;;5381:34;;;3046:10:5;;3037:45;;5320:18:6;3037:45:5;;;;;;;2453:636;;;2411:678;:::o;2071:101:1:-;1334:13;:11;:13::i;:::-;2135:30:::1;2162:1;2135:18;:30::i;:::-;2071:101::o:0;2010:206:0:-;1202:13;;929:10:4;;-1:-1:-1;;;;;1202:13:0;2103:24;;2095:78;;;;-1:-1:-1;;;2095:78:0;;5628:2:6;2095:78:0;;;5610:21:6;5667:2;5647:18;;;5640:30;5706:34;5686:18;;;5679:62;-1:-1:-1;;;5757:18:6;;;5750:39;5806:19;;2095:78:0;5426:405:6;2095:78:0;2183:26;2202:6;2183:18;:26::i;:::-;2046:170;2010:206::o;1446:910:5:-;1533:14;;;:32;;;1551:9;1564:1;1551:14;1533:32;1525:63;;;;-1:-1:-1;;;1525:63:5;;6038:2:6;1525:63:5;;;6020:21:6;6077:2;6057:18;;;6050:30;-1:-1:-1;;;6096:18:6;;;6089:48;6154:18;;1525:63:5;5836:342:6;1525:63:5;1087:8;1606;:18;;1598:45;;;;-1:-1:-1;;;1598:45:5;;6385:2:6;1598:45:5;;;6367:21:6;6424:2;6404:18;;;6397:30;-1:-1:-1;;;6443:18:6;;;6436:44;6497:18;;1598:45:5;6183:338:6;1598:45:5;1702:16;1722:14;;1721:56;;1245:7;1721:56;;;1188:7;1721:56;1702:75;-1:-1:-1;1827:19:5;1019:7;1850:13;1861:2;1850:8;:13;:::i;:::-;1849:29;;;;:::i;:::-;1827:51;;1909:11;1896:9;:24;;1888:65;;;;-1:-1:-1;;;1888:65:5;;7123:2:6;1888:65:5;;;7105:21:6;7162:2;7142:18;;;7135:30;7201;7181:18;;;7174:58;7249:18;;1888:65:5;6921:352:6;1888:65:5;2034:10;2027:18;;;;:6;:18;;;;;;;;2051:146;;;;;;;2079:9;2051:146;;2113:15;2051:146;;;;;;;;;;;;2182:4;2051:146;;;;;;2027:171;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2027:171:5;;;;;;;;;;2256:18;;;;;;:25;;2027:18;;2256:29;;;:::i;:::-;2301:48;;;2320:9;7610:25:6;;7666:2;7651:18;;7644:34;;;7694:18;;;7687:34;;;2238:47:5;;-1:-1:-1;2308:10:5;;2301:48;;7598:2:6;7583:18;2301:48:5;;;;;;;1515:841;;;1446:910;;:::o;1415:178:0:-;1334:13:1;:11;:13::i;:::-;1504::0::1;:24:::0;;-1:-1:-1;;;;;1504:24:0;::::1;-1:-1:-1::0;;;;;;1504:24:0;;::::1;::::0;::::1;::::0;;;1568:7:::1;1513:6:1::0;;-1:-1:-1;;;;;1513:6:1;;1441:85;1568:7:0::1;-1:-1:-1::0;;;;;1543:43:0::1;;;;;;;;;;;1415:178:::0;:::o;1599:130:1:-;1513:6;;-1:-1:-1;;;;;1513:6:1;929:10:4;1662:23:1;1654:68;;;;-1:-1:-1;;;1654:68:1;;7934:2:6;1654:68:1;;;7916:21:6;;;7953:18;;;7946:30;8012:34;7992:18;;;7985:62;8064:18;;1654:68:1;7732:356:6;1777:153:0;1866:13;1859:20;;-1:-1:-1;;;;;;1859:20:0;;;1889:34;1914:8;2765:6:1;;;-1:-1:-1;;;;;2781:17:1;;;-1:-1:-1;;;;;;2781:17:1;;;;;;;2813:40;;2765:6;;;2781:17;2765:6;;2813:40;;2746:16;;2813:40;2736:124;2673:187;:::o;14:173:6:-;82:20;;-1:-1:-1;;;;;131:31:6;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;:::-;333:39;192:186;-1:-1:-1;;;192:186:6:o;383:1021::-;606:2;658:21;;;728:13;;631:18;;;750:22;;;577:4;;606:2;791;;809:18;;;;850:15;;;577:4;893:485;907:6;904:1;901:13;893:485;;;966:13;;1004:9;;992:22;;1054:11;;;1048:18;1034:12;;;1027:40;1107:11;;;1101:18;1087:12;;;1080:40;1143:4;1187:11;;;1181:18;1167:12;;;1160:40;1223:4;1281:11;;;1275:18;1268:26;1261:34;1247:12;;;1240:56;1325:4;1316:14;;;;1353:15;;;;929:1;922:9;893:485;;;-1:-1:-1;1395:3:6;;383:1021;-1:-1:-1;;;;;;;383:1021:6:o;1409:254::-;1477:6;1485;1538:2;1526:9;1517:7;1513:23;1509:32;1506:52;;;1554:1;1551;1544:12;1506:52;1577:29;1596:9;1577:29;:::i;:::-;1567:39;1653:2;1638:18;;;;1625:32;;-1:-1:-1;;;1409:254:6:o;2074:180::-;2133:6;2186:2;2174:9;2165:7;2161:23;2157:32;2154:52;;;2202:1;2199;2192:12;2154:52;-1:-1:-1;2225:23:6;;2074:180;-1:-1:-1;2074:180:6:o;2441:248::-;2509:6;2517;2570:2;2558:9;2549:7;2545:23;2541:32;2538:52;;;2586:1;2583;2576:12;2538:52;-1:-1:-1;;2609:23:6;;;2679:2;2664:18;;;2651:32;;-1:-1:-1;2441:248:6:o;2902:127::-;2963:10;2958:3;2954:20;2951:1;2944:31;2994:4;2991:1;2984:15;3018:4;3015:1;3008:15;3034:127;3095:10;3090:3;3086:20;3083:1;3076:31;3126:4;3123:1;3116:15;3150:4;3147:1;3140:15;3166:127;3227:10;3222:3;3218:20;3215:1;3208:31;3258:4;3255:1;3248:15;3282:4;3279:1;3272:15;3298:135;3337:3;-1:-1:-1;;3358:17:6;;3355:43;;;3378:18;;:::i;:::-;-1:-1:-1;3425:1:6;3414:13;;3298:135::o;4136:128::-;4176:3;4207:1;4203:6;4200:1;4197:13;4194:39;;;4213:18;;:::i;:::-;-1:-1:-1;4249:9:6;;4136:128::o;6526:217::-;6566:1;6592;6582:132;;6636:10;6631:3;6627:20;6624:1;6617:31;6671:4;6668:1;6661:15;6699:4;6696:1;6689:15;6582:132;-1:-1:-1;6728:9:6;;6526:217::o;6748:168::-;6788:7;6854:1;6850;6846:6;6842:14;6839:1;6836:21;6831:1;6824:9;6817:17;6813:45;6810:71;;;6861:18;;:::i;:::-;-1:-1:-1;6901:9:6;;6748:168::o;7278:125::-;7318:4;7346:1;7343;7340:8;7337:34;;;7351:18;;:::i;:::-;-1:-1:-1;7388:9:6;;7278:125::o"},"gasEstimates":{"creation":{"codeDepositCost":"642000","executionCost":"676","totalCost":"642676"},"external":{"FIL_PER_10T()":"217","LOCK_TIME_20_DAYS()":"261","LOCK_TIME_40_DAYS()":"218","MAX_DC()":"240","acceptOwnership()":"infinite","getAllStakeInfo(address)":"infinite","getStakeCount(address)":"2604","owner()":"2343","pendingOwner()":"2375","renounceOwnership()":"infinite","stake(uint256,uint256)":"119880","stakes(address,uint256)":"11210","transferOwnership(address)":"30503","unlock(uint256)":"infinite"}},"methodIdentifiers":{"FIL_PER_10T()":"d1d7e10a","LOCK_TIME_20_DAYS()":"f158adf2","LOCK_TIME_40_DAYS()":"61cbfa50","MAX_DC()":"bb224d6e","acceptOwnership()":"79ba5097","getAllStakeInfo(address)":"559566b9","getStakeCount(address)":"cf57ee69","owner()":"8da5cb5b","pendingOwner()":"e30c3978","renounceOwnership()":"715018a6","stake(uint256,uint256)":"7b0472f0","stakes(address,uint256)":"584b62a1","transferOwnership(address)":"f2fde38b","unlock(uint256)":"6198e339"}},"metadata":"{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIL_PER_10T\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIME_20_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCK_TIME_40_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct DcPayChannel.StakeInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeType\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeId\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DcPayChannel.sol\":\"DcPayChannel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd712fb45b3ea0ab49679164e3895037adc26ce12879d5184feb040e01c1c07a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/DcPayChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\ncontract DcPayChannel is Ownable2StepUpgradeable{\\n    // \\u8d28\\u62bc\\u7684\\u4fe1\\u606f\\u7ed3\\u6784\\n    struct Stake {\\n        uint256 amount;      // \\u8d28\\u62bcFIL\\u6570\\u91cf\\n        uint256 startTime;   // \\u8d28\\u62bc\\u5f00\\u59cb\\u65f6\\u95f4\\n        uint256 lockTime;    // \\u9501\\u5b9a\\u65f6\\u95f4\\uff0c20\\u5929\\u621640\\u5929\\n        bool active;         // \\u8d28\\u62bc\\u662f\\u5426\\u6709\\u6548\\n    }\\n\\n    // \\u7528\\u6237\\u7684\\u8d28\\u62bc\\u8bb0\\u5f55\\u7ed3\\u6784\\uff0c\\u7528\\u4e8e\\u8fd4\\u56de\\u5168\\u90e8\\u8d28\\u62bc\\u4fe1\\u606f\\n    struct StakeInfo {\\n        uint256 stakeId;     // \\u8d28\\u62bcID\\n        uint256 amount;      // \\u8d28\\u62bcFIL\\u6570\\u91cf\\n        uint256 startTime;   // \\u8d28\\u62bc\\u5f00\\u59cb\\u65f6\\u95f4\\n        uint256 lockTime;    // \\u9501\\u5b9a\\u65f6\\u95f4\\n        bool active;         // \\u8d28\\u62bc\\u662f\\u5426\\u6709\\u6548\\n    }\\n\\n    // \\u6bcf\\u4e2a\\u5730\\u5740\\u53ef\\u4ee5\\u6709\\u591a\\u6761\\u8d28\\u62bc\\u8bb0\\u5f55\\uff0c\\u4f7f\\u7528\\u6570\\u7ec4\\n    mapping(address => Stake[]) public stakes; // \\u6bcf\\u4e2a\\u5730\\u5740\\u5bf9\\u5e94\\u4e00\\u4e2a\\u8d28\\u62bc\\u6570\\u7ec4\\n\\n    // \\u8d28\\u62bc\\u6bd4\\u4f8b\\u548c\\u6700\\u5927\\u7533\\u8bf7\\u91cf\\n    uint256 public constant FIL_PER_10T = 1 ether; // 10T\\u7684DC\\u9700\\u89811FIL\\n    uint256 public constant MAX_DC = 2 * 1024;     // \\u6700\\u59272P\\n\\n    // \\u9501\\u5b9a\\u65f6\\u95f4\\u5e38\\u91cf\\n    uint256 public constant LOCK_TIME_20_DAYS = 20 days;\\n    uint256 public constant LOCK_TIME_40_DAYS = 40 days;\\n\\n    event Staked(address indexed user, uint256 amount, uint256 lockTime, uint256 stakeId);\\n    event Unstaked(address indexed user, uint256 amount, uint256 stakeId);\\n\\n    // \\u8d28\\u62bc\\u529f\\u80fd\\n    function stake(uint256 dcAmount, uint256 stakeType) external payable {\\n        require(stakeType == 0 || stakeType == 1, \\\"Invalid stake type\\\");\\n        require(dcAmount <= MAX_DC, \\\"Exceeds max DC\\\");\\n\\n        // \\u6839\\u636e\\u8d28\\u62bc\\u7c7b\\u578b\\u786e\\u5b9a\\u9501\\u5b9a\\u65f6\\u95f4\\n        uint256 lockTime = (stakeType == 0) ? LOCK_TIME_20_DAYS : LOCK_TIME_40_DAYS;\\n\\n        // \\u8ba1\\u7b97\\u6240\\u9700FIL\\u8d28\\u62bc\\u6570\\u91cf\\n        uint256 requiredFil = (dcAmount / 10) * FIL_PER_10T;\\n        require(msg.value >= requiredFil, \\\"Insufficient FIL for staking\\\");\\n\\n        // \\u5b58\\u50a8\\u8d28\\u62bc\\u4fe1\\u606f\\u5230\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u8bb0\\u5f55\\u6570\\u7ec4\\u4e2d\\n        stakes[msg.sender].push(Stake({\\n            amount: msg.value,\\n            startTime: block.timestamp,\\n            lockTime: lockTime,\\n            active: true\\n        }));\\n\\n        // \\u83b7\\u53d6\\u8d28\\u62bc\\u7684ID\\n        uint256 stakeId = stakes[msg.sender].length - 1;\\n\\n        emit Staked(msg.sender, msg.value, lockTime, stakeId);\\n    }\\n\\n    // \\u89e3\\u9501\\u529f\\u80fd\\uff0c\\u901a\\u8fc7\\u8d28\\u62bc\\u8bb0\\u5f55ID\\u89e3\\u9501\\n    function unlock(uint256 stakeId) external {\\n        require(stakeId < stakes[msg.sender].length, \\\"Invalid stakeId\\\");\\n\\n        Stake storage userStake = stakes[msg.sender][stakeId];\\n        require(userStake.active, \\\"Stake is already unlocked\\\");\\n        require(block.timestamp >= userStake.startTime + userStake.lockTime, \\\"Stake is still locked\\\");\\n\\n        uint256 amountToReturn = userStake.amount;\\n        userStake.active = false; // \\u5c06\\u8be5\\u8d28\\u62bc\\u6807\\u8bb0\\u4e3a\\u65e0\\u6548\\n\\n        // \\u8fd4\\u8fd8\\u8d28\\u62bc\\u7684FIL\\n        (bool success, ) = msg.sender.call{value: amountToReturn}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Unstaked(msg.sender, amountToReturn, stakeId);\\n    }\\n\\n    // \\u5141\\u8bb8\\u5408\\u7ea6\\u63a5\\u6536ETH (FIL)\\n    receive() external payable {}\\n\\n    // \\u83b7\\u53d6\\u7528\\u6237\\u5168\\u90e8\\u8d28\\u62bc\\u8bb0\\u5f55\\u7684\\u4fe1\\u606f\\uff0c\\u8fd4\\u56de\\u4e00\\u4e2a\\u5305\\u542b\\u6240\\u6709\\u8d28\\u62bc\\u4fe1\\u606f\\u7684\\u6570\\u7ec4\\u5bf9\\u8c61\\n    function getAllStakeInfo(address user) external view returns (StakeInfo[] memory) {\\n        uint256 stakeCount = stakes[user].length;\\n        StakeInfo[] memory allStakeInfo = new StakeInfo[](stakeCount); // \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u6570\\u7ec4\\n\\n        for (uint256 i = 0; i < stakeCount; i++) {\\n            Stake memory stakeInfo = stakes[user][i];\\n            allStakeInfo[i] = StakeInfo({\\n                stakeId: i,\\n                amount: stakeInfo.amount,\\n                startTime: stakeInfo.startTime,\\n                lockTime: stakeInfo.lockTime,\\n                active: stakeInfo.active\\n            });\\n        }\\n\\n        return allStakeInfo;\\n    }\\n\\n    // \\u83b7\\u53d6\\u7528\\u6237\\u7684\\u8d28\\u62bc\\u8bb0\\u5f55\\u603b\\u6570\\n    function getStakeCount(address user) external view returns (uint256) {\\n        return stakes[user].length;\\n    }\\n}\",\"keccak256\":\"0xd3e78384a49849e37ffbd70657bfe5fb66151a97c1ea8aaa9cad712c6030bf54\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":244,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":247,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":731,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"__gap","offset":0,"slot":"1","type":"t_array(t_uint256)50_storage"},{"astId":116,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"_owner","offset":0,"slot":"51","type":"t_address"},{"astId":236,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"__gap","offset":0,"slot":"52","type":"t_array(t_uint256)49_storage"},{"astId":25,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"_pendingOwner","offset":0,"slot":"101","type":"t_address"},{"astId":104,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"__gap","offset":0,"slot":"102","type":"t_array(t_uint256)49_storage"},{"astId":763,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"stakes","offset":0,"slot":"151","type":"t_mapping(t_address,t_array(t_struct(Stake)746_storage)dyn_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_struct(Stake)746_storage)dyn_storage":{"base":"t_struct(Stake)746_storage","encoding":"dynamic_array","label":"struct DcPayChannel.Stake[]","numberOfBytes":"32"},"t_array(t_uint256)49_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[49]","numberOfBytes":"1568"},"t_array(t_uint256)50_storage":{"base":"t_uint256","encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_array(t_struct(Stake)746_storage)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct DcPayChannel.Stake[])","numberOfBytes":"32","value":"t_array(t_struct(Stake)746_storage)dyn_storage"},"t_struct(Stake)746_storage":{"encoding":"inplace","label":"struct DcPayChannel.Stake","members":[{"astId":739,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"amount","offset":0,"slot":"0","type":"t_uint256"},{"astId":741,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":743,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"lockTime","offset":0,"slot":"2","type":"t_uint256"},{"astId":745,"contract":"contracts/DcPayChannel.sol:DcPayChannel","label":"active","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}